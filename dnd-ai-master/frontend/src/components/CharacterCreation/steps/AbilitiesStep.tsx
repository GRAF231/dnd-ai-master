import { useState } from 'react';
import { CharacterData } from '../CharacterCreationWizard';

interface AbilitiesStepProps {
  data: CharacterData;
  onChange: (updates: Partial<CharacterData>) => void;
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
const ABILITIES = [
  {
    key: 'strength' as keyof CharacterData['abilities'],
    name: '–°–∏–ª–∞',
    shortName: 'STR',
    description: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ—â—å, –≤–ª–∏—è–µ—Ç –Ω–∞ –∞—Ç–∞–∫—É –≤ –±–ª–∏–∂–Ω–µ–º –±–æ—é –∏ –ø–æ–¥–Ω—è—Ç–∏–µ —Ç—è–∂–µ—Å—Ç–µ–π',
    icon: 'üí™',
    examples: '–õ–∞–∑–∞–Ω–∏–µ, –ø—Ä—ã–∂–∫–∏, —É–¥–∞—Ä—ã –º–µ—á–æ–º'
  },
  {
    key: 'dexterity' as keyof CharacterData['abilities'],
    name: '–õ–æ–≤–∫–æ—Å—Ç—å',
    shortName: 'DEX',
    description: '–ë—ã—Å—Ç—Ä–æ—Ç–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è, –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–ª–∞—Å—Å –±—Ä–æ–Ω–∏ –∏ –∞—Ç–∞–∫–∏ –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è',
    icon: 'ü§∏',
    examples: '–£–∫–ª–æ–Ω–µ–Ω–∏–µ, —Å—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –ª—É–∫–∞, —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å'
  },
  {
    key: 'constitution' as keyof CharacterData['abilities'],
    name: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
    shortName: 'CON',
    description: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∏ –∑–¥–æ—Ä–æ–≤—å–µ, –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∏—Ç–æ–≤',
    icon: 'üõ°Ô∏è',
    examples: '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±–æ–ª–µ–∑–Ω—è–º, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'
  },
  {
    key: 'intelligence' as keyof CharacterData['abilities'],
    name: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    shortName: 'INT',
    description: '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—é –∏ –ø–∞–º—è—Ç–∏, –≤–∞–∂–µ–Ω –¥–ª—è –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤',
    icon: 'üß†',
    examples: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∑–Ω–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, –º–∞–≥–∏—è'
  },
  {
    key: 'wisdom' as keyof CharacterData['abilities'],
    name: '–ú—É–¥—Ä–æ—Å—Ç—å',
    shortName: 'WIS',
    description: '–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å, –≤–∞–∂–Ω–∞ –¥–ª—è –∂—Ä–µ—Ü–æ–≤',
    icon: 'ü¶â',
    examples: '–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ, –º–µ–¥–∏—Ü–∏–Ω–∞, –≤—ã–∂–∏–≤–∞–Ω–∏–µ'
  },
  {
    key: 'charisma' as keyof CharacterData['abilities'],
    name: '–•–∞—Ä–∏–∑–º–∞',
    shortName: 'CHA',
    description: '–°–∏–ª–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–ª–∏—è—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö',
    icon: '‚ú®',
    examples: '–£–±–µ–∂–¥–µ–Ω–∏–µ, –æ–±–º–∞–Ω, –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ'
  }
];

// –ú–µ—Ç–æ–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
const POINT_BUY_METHODS = [
  {
    id: 'point_buy',
    name: '–ü–æ–∫—É–ø–∫–∞ –æ—á–∫–æ–≤',
    description: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ 27 –æ—á–∫–æ–≤ –º–µ–∂–¥—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ (8-15)',
    recommended: true
  },
  {
    id: 'standard_array',
    name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä',
    description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 15, 14, 13, 12, 10, 8',
    recommended: false
  },
  {
    id: 'manual',
    name: '–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
    description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é (8-18)',
    recommended: false
  }
];

const STANDARD_ARRAY = [15, 14, 13, 12, 10, 8];

export default function AbilitiesStep({ data, onChange }: AbilitiesStepProps) {
  const [method, setMethod] = useState<string>('point_buy');

  // –í—ã—á–∏—Å–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const getModifier = (score: number): number => {
    return Math.floor((score - 10) / 2);
  };

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –¥–ª—è point buy
  const getPointCost = (score: number): number => {
    if (score <= 13) return score - 8;
    if (score === 14) return 7;
    if (score === 15) return 9;
    return 0;
  };

  const getTotalPointsSpent = (): number => {
    return Object.values(data.abilities).reduce((total, score) => {
      return total + getPointCost(score);
    }, 0);
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
  const updateAbility = (ability: keyof CharacterData['abilities'], value: number) => {
    const newAbilities = { ...data.abilities, [ability]: value };
    onChange({ abilities: newAbilities });
  };

  // –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
  const setQuickArray = (values: number[]) => {
    const newAbilities = { ...data.abilities };
    ABILITIES.forEach((ability, index) => {
      newAbilities[ability.key] = values[index] || 10;
    });
    onChange({ abilities: newAbilities });
  };

  return (
    <div className="max-w-5xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-white mb-2">
          üí™ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        </h2>
        <p className="text-gray-400">
          –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        </p>
      </div>

      {/* –ú–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
      <div className="mb-8">
        <h3 className="text-xl font-semibold text-white mb-4">
          –ú–µ—Ç–æ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {POINT_BUY_METHODS.map((methodOption) => (
            <button
              key={methodOption.id}
              onClick={() => setMethod(methodOption.id)}
              className={`
                p-4 rounded-lg border-2 text-left transition-all
                ${method === methodOption.id
                  ? 'border-purple-500 bg-purple-900/50 text-white'
                  : 'border-gray-600 bg-gray-800 text-gray-300 hover:border-gray-500'
                }
              `}
            >
              <div className="flex items-center justify-between mb-2">
                <h4 className="font-semibold">{methodOption.name}</h4>
                {methodOption.recommended && (
                  <span className="text-xs bg-green-600 text-white px-2 py-1 rounded">
                    –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø
                  </span>
                )}
              </div>
              <p className="text-sm opacity-75">{methodOption.description}</p>
            </button>
          ))}
        </div>
      </div>

      {/* Point Buy –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {method === 'point_buy' && (
        <div className="mb-6 p-4 bg-blue-900/30 border border-blue-500/50 rounded-lg">
          <div className="flex items-center justify-between">
            <span className="text-blue-300 font-medium">
              üìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –æ—á–∫–æ–≤: {getTotalPointsSpent()} / 27
            </span>
            <div className="flex space-x-2">
              <button
                onClick={() => setQuickArray([15, 14, 13, 12, 10, 8])}
                className="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded"
              >
                Balanced
              </button>
              <button
                onClick={() => setQuickArray([15, 15, 15, 8, 8, 8])}
                className="px-3 py-1 bg-red-600 hover:bg-red-700 text-white text-sm rounded"
              >
                Focused
              </button>
            </div>
          </div>
          {getTotalPointsSpent() > 27 && (
            <p className="text-red-400 text-sm mt-2">
              ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—á–∫–æ–≤! –£–º–µ–Ω—å—à–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
            </p>
          )}
        </div>
      )}

      {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {ABILITIES.map((ability) => {
          const score = data.abilities[ability.key];
          const modifier = getModifier(score);
          const isValidPointBuy = method !== 'point_buy' || getTotalPointsSpent() <= 27;
          
          return (
            <div key={ability.key} className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="flex items-center space-x-3 mb-4">
                <span className="text-3xl">{ability.icon}</span>
                <div>
                  <h3 className="text-lg font-semibold text-white">
                    {ability.name}
                  </h3>
                  <p className="text-sm text-gray-400">{ability.shortName}</p>
                </div>
              </div>

              {/* –ó–Ω–∞—á–µ–Ω–∏–µ */}
              <div className="mb-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-gray-300">–ó–Ω–∞—á–µ–Ω–∏–µ:</span>
                  <div className="text-right">
                    <span className={`text-2xl font-bold ${
                      isValidPointBuy ? 'text-white' : 'text-red-400'
                    }`}>
                      {score}
                    </span>
                    <span className={`ml-2 text-sm ${
                      modifier >= 0 ? 'text-green-400' : 'text-red-400'
                    }`}>
                      ({modifier >= 0 ? '+' : ''}{modifier})
                    </span>
                  </div>
                </div>

                {/* –°–ª–∞–π–¥–µ—Ä –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ */}
                {method === 'manual' || method === 'point_buy' ? (
                  <div className="space-y-3">
                    <input
                      type="range"
                      min={method === 'point_buy' ? 8 : 3}
                      max={method === 'point_buy' ? 15 : 18}
                      value={score}
                      onChange={(e) => updateAbility(ability.key, parseInt(e.target.value))}
                      className="w-full accent-purple-500"
                    />
                    <div className="flex space-x-1">
                      <button
                        onClick={() => updateAbility(ability.key, Math.max(score - 1, method === 'point_buy' ? 8 : 3))}
                        className="flex-1 px-2 py-1 bg-gray-600 hover:bg-gray-700 text-white text-sm rounded"
                      >
                        -
                      </button>
                      <button
                        onClick={() => updateAbility(ability.key, Math.min(score + 1, method === 'point_buy' ? 15 : 18))}
                        className="flex-1 px-2 py-1 bg-gray-600 hover:bg-gray-700 text-white text-sm rounded"
                      >
                        +
                      </button>
                    </div>
                  </div>
                ) : null}
              </div>

              {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
              <div className="text-xs text-gray-400 space-y-1">
                <p>{ability.description}</p>
                <p className="text-gray-500">{ability.examples}</p>
              </div>
            </div>
          );
        })}
      </div>

      {/* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä */}
      {method === 'standard_array' && (
        <div className="mt-8 p-6 bg-gray-800 rounded-lg border border-gray-700">
          <h3 className="text-lg font-semibold text-white mb-4">
            üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
          </h3>
          <p className="text-gray-400 mb-4">
            –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º: {STANDARD_ARRAY.join(', ')}
          </p>
          <button
            onClick={() => setQuickArray(STANDARD_ARRAY)}
            className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md"
          >
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
          </button>
        </div>
      )}

      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="mt-8 p-6 bg-gray-800 rounded-lg border border-gray-700">
        <h3 className="text-lg font-semibold text-white mb-4">
          üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
          <div>
            <span className="text-gray-400">–°—É–º–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:</span>
            <span className="ml-2 text-white font-medium">
              {Object.values(data.abilities).reduce((sum, val) => sum + val, 0)}
            </span>
          </div>
          <div>
            <span className="text-gray-400">–°—Ä–µ–¥–Ω—è—è:</span>
            <span className="ml-2 text-white font-medium">
              {(Object.values(data.abilities).reduce((sum, val) => sum + val, 0) / 6).toFixed(1)}
            </span>
          </div>
          <div>
            <span className="text-gray-400">–°—É–º–º–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤:</span>
            <span className="ml-2 text-white font-medium">
              {Object.values(data.abilities).reduce((sum, val) => sum + getModifier(val), 0)}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}
