import { CharacterData } from '../CharacterCreationWizard';

interface BasicInfoStepProps {
  data: CharacterData;
  onChange: (updates: Partial<CharacterData>) => void;
}

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—ã
const RACES = [
  { id: 'human', name: '–ß–µ–ª–æ–≤–µ–∫', description: '+1 –∫–æ –≤—Å–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º', icon: 'üë§' },
  { id: 'elf', name: '–≠–ª—å—Ñ', description: '+2 –õ–æ–≤–∫–æ—Å—Ç—å, —Ç–µ–º–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ', icon: 'üßù‚Äç‚ôÄÔ∏è' },
  { id: 'dwarf', name: '–î–≤–∞—Ä—Ñ', description: '+2 –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —è–¥—É', icon: 'üßî' },
  { id: 'halfling', name: '–•–∞–ª—Ñ–ª–∏–Ω–≥', description: '+2 –õ–æ–≤–∫–æ—Å—Ç—å, —É–¥–∞—á–∞', icon: 'üçÄ' }
];

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã
const CLASSES = [
  { id: 'fighter', name: '–í–æ–∏–Ω', description: '–ú–∞—Å—Ç–µ—Ä –±–æ—è –∏ —Ç–∞–∫—Ç–∏–∫–∏', icon: '‚öîÔ∏è' },
  { id: 'wizard', name: '–í–æ–ª—à–µ–±–Ω–∏–∫', description: '–ò–∑—É—á–∞—é—â–∏–π –º–∞–≥–∏—é —É—á–µ–Ω—ã–π', icon: 'üßô‚Äç‚ôÇÔ∏è' },
  { id: 'rogue', name: '–ü–ª—É—Ç', description: '–ú–∞—Å—Ç–µ—Ä —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ –∏ –ª–æ–≤–∫–æ—Å—Ç–∏', icon: 'üó°Ô∏è' },
  { id: 'cleric', name: '–ñ—Ä–µ—Ü', description: '–¶–µ–ª–∏—Ç–µ–ª—å –∏ –∑–∞—â–∏—Ç–Ω–∏–∫', icon: '‚õ™' }
];

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏
const BACKGROUNDS = [
  { id: 'folk_hero', name: '–ù–∞—Ä–æ–¥–Ω—ã–π –≥–µ—Ä–æ–π', description: '–ü—Ä–æ—Å—Ç–æ–ª—é–¥–∏–Ω —Å—Ç–∞–≤—à–∏–π –≥–µ—Ä–æ–µ–º' },
  { id: 'soldier', name: '–°–æ–ª–¥–∞—Ç', description: '–û–ø—ã—Ç–Ω—ã–π –≤–æ–µ–Ω–Ω—ã–π' },
  { id: 'criminal', name: '–ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫', description: '–í–æ—Ä –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏–∫' },
  { id: 'acolyte', name: '–ü–æ—Å–ª—É—à–Ω–∏–∫', description: '–°–ª—É–∂–∏—Ç–µ–ª—å —Ö—Ä–∞–º–∞' }
];

export default function BasicInfoStep({ data, onChange }: BasicInfoStepProps) {
  return (
    <div className="max-w-4xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-white mb-2">
          üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        </h2>
        <p className="text-gray-400">
          –ó–∞–¥–∞–π—Ç–µ –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        </p>
      </div>

      <div className="space-y-8">
        {/* –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
        <div>
          <label className="block text-lg font-semibold text-white mb-3">
            –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          </label>
          <input
            type="text"
            value={data.name}
            onChange={(e) => onChange({ name: e.target.value })}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è..."
            className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-lg"
          />
          {!data.name && (
            <p className="mt-2 text-sm text-gray-400">
              üí° –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è
            </p>
          )}
        </div>

        {/* –†–∞—Å–∞ */}
        <div>
          <label className="block text-lg font-semibold text-white mb-4">
            –†–∞—Å–∞
          </label>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {RACES.map((race) => (
              <button
                key={race.id}
                onClick={() => onChange({ race: race.id })}
                className={`
                  p-4 rounded-lg border-2 text-left transition-all hover:scale-105
                  ${data.race === race.id
                    ? 'border-purple-500 bg-purple-900/50 text-white'
                    : 'border-gray-600 bg-gray-800 text-gray-300 hover:border-gray-500'
                  }
                `}
              >
                <div className="flex items-center space-x-3 mb-2">
                  <span className="text-2xl">{race.icon}</span>
                  <h3 className="font-semibold text-lg">{race.name}</h3>
                </div>
                <p className="text-sm opacity-75">{race.description}</p>
              </button>
            ))}
          </div>
          {!data.race && (
            <p className="mt-3 text-sm text-gray-400">
              üí° –†–∞—Å–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            </p>
          )}
        </div>

        {/* –ö–ª–∞—Å—Å */}
        <div>
          <label className="block text-lg font-semibold text-white mb-4">
            –ö–ª–∞—Å—Å
          </label>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {CLASSES.map((characterClass) => (
              <button
                key={characterClass.id}
                onClick={() => onChange({ class: characterClass.id })}
                className={`
                  p-4 rounded-lg border-2 text-left transition-all hover:scale-105
                  ${data.class === characterClass.id
                    ? 'border-purple-500 bg-purple-900/50 text-white'
                    : 'border-gray-600 bg-gray-800 text-gray-300 hover:border-gray-500'
                  }
                `}
              >
                <div className="flex items-center space-x-3 mb-2">
                  <span className="text-2xl">{characterClass.icon}</span>
                  <h3 className="font-semibold text-lg">{characterClass.name}</h3>
                </div>
                <p className="text-sm opacity-75">{characterClass.description}</p>
              </button>
            ))}
          </div>
          {!data.class && (
            <p className="mt-3 text-sm text-gray-400">
              üí° –ö–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∏–ª—å –∏–≥—Ä—ã
            </p>
          )}
        </div>

        {/* –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è */}
        <div>
          <label className="block text-lg font-semibold text-white mb-4">
            –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
          </label>
          <div className="space-y-2">
            {BACKGROUNDS.map((background) => (
              <button
                key={background.id}
                onClick={() => onChange({ background: background.name })}
                className={`
                  w-full p-3 rounded-lg border text-left transition-all
                  ${data.background === background.name
                    ? 'border-purple-500 bg-purple-900/30 text-white'
                    : 'border-gray-600 bg-gray-800 text-gray-300 hover:border-gray-500'
                  }
                `}
              >
                <div className="flex justify-between items-center">
                  <div>
                    <h4 className="font-medium">{background.name}</h4>
                    <p className="text-sm opacity-75">{background.description}</p>
                  </div>
                  {data.background === background.name && (
                    <span className="text-purple-400">‚úì</span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* –ü—Ä–µ–≤—å—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
        {data.name && data.race && data.class && (
          <div className="mt-8 p-6 bg-gray-800 rounded-lg border border-gray-700">
            <h3 className="text-lg font-semibold text-white mb-3">
              ‚ú® –ü—Ä–µ–≤—å—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            </h3>
            <div className="text-gray-300">
              <p className="text-xl font-medium text-white mb-2">
                {data.name}
              </p>
              <p>
                <span className="text-gray-400">–†–∞—Å–∞:</span> {RACES.find(r => r.id === data.race)?.name}
              </p>
              <p>
                <span className="text-gray-400">–ö–ª–∞—Å—Å:</span> {CLASSES.find(c => c.id === data.class)?.name}
              </p>
              <p>
                <span className="text-gray-400">–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:</span> {data.background}
              </p>
              <p>
                <span className="text-gray-400">–£—Ä–æ–≤–µ–Ω—å:</span> {data.level}
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
