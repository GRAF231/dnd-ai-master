'use client';

import React, { useState } from 'react';
import { useVoiceChat } from '@/hooks/useVoiceChat';
import { ParticipantItem } from './ParticipantItem';
import { VoiceControls } from './VoiceControls';

interface VoicePanelProps {
  roomId: string;
  playerName: string;
  className?: string;
}

export const VoicePanel: React.FC<VoicePanelProps> = ({
  roomId,
  playerName,
  className = ''
}) => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [showDebugInfo, setShowDebugInfo] = useState(false);

  const {
    participants,
    isConnected,
    connectionStates,
    isInitializing,
    isMuted,
    joinVoiceChat,
    leaveVoiceChat,
    toggleMute,
    forcePlayAllAudio,
    setParticipantVolume
  } = useVoiceChat();

  const handleToggleVoice = async () => {
    if (isConnected) {
      leaveVoiceChat();
    } else {
      try {
        await joinVoiceChat(roomId, playerName);
      } catch (error) {
        console.error('Voice chat join error:', error);
        // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É
      }
    }
  };

  const localParticipant = participants.find(p => p.isLocal);
  const remoteParticipants = participants.filter(p => !p.isLocal);

  return (
    <div className={`bg-gray-800 rounded-lg border border-gray-700 h-full flex flex-col ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è */}
      <div className="flex items-center justify-between p-4 border-b border-gray-700">
        <div className="flex items-center space-x-2">
          <h3 className="text-lg font-semibold text-white">üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–≤—è–∑—å</h3>
          {isConnected && (
            <span className="px-2 py-1 bg-green-600 text-xs rounded text-white">
              {participants.length}
            </span>
          )}
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
        <div className="flex items-center space-x-1">
          {/* Debug toggle (—Å–∫—Ä—ã—Ç–∞—è –∫–Ω–æ–ø–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º) */}
          <button
            onDoubleClick={() => setShowDebugInfo(!showDebugInfo)}
            className="text-gray-400 hover:text-white transition-colors text-xs"
            title="–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è debug —Ä–µ–∂–∏–º–∞"
          >
            ‚öôÔ∏è
          </button>
          
          {/* –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
          <button
            onClick={() => setIsCollapsed(!isCollapsed)}
            className="md:hidden text-gray-400 hover:text-white transition-colors"
          >
            {isCollapsed ? '‚ñ≤' : '‚ñº'}
          </button>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
      {!isCollapsed && (
        <div className="flex-1 flex flex-col p-4 space-y-4 overflow-hidden">
          {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <VoiceControls
            isConnected={isConnected}
            isMuted={isMuted}
            isInitializing={isInitializing}
            participantCount={participants.length}
            onToggleMute={toggleMute}
            onToggleVoice={handleToggleVoice}
            onForcePlayAudio={remoteParticipants.length > 0 ? forcePlayAllAudio : undefined}
          />

          {/* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
          <div className="flex-1 overflow-y-auto">
            <div className="space-y-3">
              {/* –õ–æ–∫–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (–≤—ã) */}
              {localParticipant && (
                <div>
                  <h4 className="text-sm font-medium text-gray-300 mb-2">–í—ã</h4>
                  <ParticipantItem
                    participant={localParticipant}
                    showControls={isConnected}
                    onToggleMute={toggleMute}
                    onVolumeChange={setParticipantVolume}
                  />
                </div>
              )}

              {/* –£–¥–∞–ª–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ */}
              {remoteParticipants.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-gray-300 mb-2">
                    –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ ({remoteParticipants.length})
                  </h4>
                  <div className="space-y-2">
                    {remoteParticipants.map((participant) => (
                      <ParticipantItem
                        key={participant.id}
                        participant={participant}
                        onVolumeChange={setParticipantVolume}
                      />
                    ))}
                  </div>
                </div>
              )}

              {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
              {participants.length === 0 && (
                <div className="text-center py-6">
                  <div className="text-gray-500 text-sm">
                    {isConnected 
                      ? '–û–∂–∏–¥–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...' 
                      : '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É'
                    }
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          {showDebugInfo && Object.keys(connectionStates).length > 0 && (
            <div className="border-t border-gray-700 pt-3">
              <div className="text-xs text-gray-400 space-y-1">
                <div className="font-medium">üîß Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</div>
                {Object.entries(connectionStates).map(([peerID, state]) => (
                  <div key={peerID} className="flex justify-between">
                    <span>Peer {peerID.slice(0, 8)}:</span>
                    <span className={state === 'connected' ? 'text-green-400' : 'text-yellow-400'}>
                      {state}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          {!isConnected && (
            <div className="border-t border-gray-700 pt-3">
              <div className="text-xs text-gray-400">
                <p className="mb-1">üí° –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è</p>
                <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É</p>
              </div>
            </div>
          )}
        </div>
      )}

      {/* –°–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {isCollapsed && (
        <div className="p-4">
          <div className="text-sm text-gray-400 text-center">
            {isConnected ? `üéôÔ∏è ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤` : 'üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–≤—è–∑—å'}
          </div>
        </div>
      )}
    </div>
  );
};
