import { ElizaService, ElizaChatRequest } from './eliza.js';
import { toolsService, ToolCallRequest } from '../tools/index.js';
import { MemoryManager, GameContext } from '../memory/index.js';

export interface DMResponse {
  content: string;
  timestamp: string;
  type: 'narration' | 'npc_dialogue' | 'combat' | 'description' | 'system';
  toolCalls?: ToolCallResult[];
  context?: GameContext;
  sessionId?: string;
}

export interface ToolCallResult {
  name: string;
  arguments: any;
  result: string;
  success: boolean;
}

export interface DMRequest {
  playerMessage: string;
  playerName?: string;
  roomId: string;
  enableTools?: boolean;
  useMemory?: boolean; // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
}

/**
 * DM Agent —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
 */
export class DMAgentWithMemoryService {
  private eliza: ElizaService;
  private memoryManager: MemoryManager;
  private systemPrompt: string;

  constructor(eliza: ElizaService, memoryManager: MemoryManager) {
    this.eliza = eliza;
    this.memoryManager = memoryManager;
    this.systemPrompt = this.createSystemPrompt();
  }

  private createSystemPrompt(): string {
    return `–¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä D&D, –≤–µ–¥—É—â–∏–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é. –¢–≤–æ—è —Ä–æ–ª—å - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∂–∏–≤–æ–π –º–∏—Ä, –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ü–µ–Ω—ã (3-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∏ NPC –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤. 

–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ:
- –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
- –î–ª—è –∞—Ç–∞–∫ –∏ —É—Ä–æ–Ω–∞ –≤ –±–æ—é
- –î–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

–ü–∏—à–∏ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ª–∏—Ü–∞ ("–í—ã –≤–∏–¥–∏—Ç–µ..."). –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –∑–∞–∫—É–ª–∏—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ –¥–∞–≤–∞–π –∏–≥—Ä–æ–∫–∞–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É.

–í–ê–ñ–ù–û: –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ–π –∫–∞–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø–æ–º–Ω–∏ –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö –∏ —Ä–µ—à–µ–Ω–∏—è—Ö –∏–≥—Ä–æ–∫–æ–≤.`;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –ø–∞–º—è—Ç–∏
   */
  private async buildMessagesWithMemory(request: DMRequest): Promise<{
    messages: any[];
    context?: GameContext;
    sessionId?: string;
  }> {
    const messages: any[] = [
      { role: 'system', content: this.systemPrompt }
    ];

    let context: GameContext | undefined;
    let sessionId: string | undefined;

    if (request.useMemory !== false) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
        context = await this.memoryManager.buildContext(request.roomId, {
          max_messages: 20, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
          max_tokens: 100000, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
          include_entities: true,
          include_facts: true
        });

        sessionId = context.session_id;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let contextInfo = '\n=== –ö–û–ù–¢–ï–ö–°–¢ –ö–ê–ú–ü–ê–ù–ò–ò ===\n';
        contextInfo += `–ö–æ–º–Ω–∞—Ç–∞: ${request.roomId}\n`;
        contextInfo += `–°–µ—Å—Å–∏—è: ${context.session_id}\n`;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (context.session_summary) {
          contextInfo += `\n–°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏:\n${context.session_summary}\n`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–Ω–æ—Å—Ç—è—Ö
        if (context.active_entities.length > 0) {
          contextInfo += '\n–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:\n';
          context.active_entities.forEach(entity => {
            contextInfo += `- ${entity.type}: ${entity.name}`;
            if (entity.description) {
              contextInfo += ` - ${entity.description}`;
            }
            contextInfo += '\n';
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        if (context.relevant_facts.length > 0) {
          contextInfo += '\n–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n';
          context.relevant_facts.forEach(fact => {
            contextInfo += `- ${fact.key}: ${fact.value}\n`;
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        if (context.recent_messages.length > 0) {
          contextInfo += '\n–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n';
          context.recent_messages.forEach(msg => {
            const role = msg.role === 'user' ? (msg.player_name || '–ò–≥—Ä–æ–∫') : '–ú–∞—Å—Ç–µ—Ä';
            contextInfo += `${role}: ${msg.content}\n`;
          });
        }

        contextInfo += `\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ character_sheet tool –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π room_id: "${request.roomId}"\n`;
        contextInfo += `–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: ${context.total_tokens}\n`;
        contextInfo += '=== –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ===\n';

        messages.push({ role: 'system', content: contextInfo });

      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏
        let fallbackContext = '\n=== –ö–û–ù–¢–ï–ö–°–¢ –°–ï–°–°–ò–ò ===\n';
        fallbackContext += `–ö–æ–º–Ω–∞—Ç–∞: ${request.roomId}\n`;
        fallbackContext += `‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ character_sheet tool –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π room_id: "${request.roomId}"\n`;
        fallbackContext += '=== –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ===\n';
        
        messages.push({ role: 'system', content: fallbackContext });
      }
    } else {
      // –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø–∞–º—è—Ç–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º DMAgent)
      let contextInfo = '\n=== –ö–û–ù–¢–ï–ö–°–¢ –°–ï–°–°–ò–ò ===\n';
      contextInfo += `–ö–æ–º–Ω–∞—Ç–∞: ${request.roomId}\n`;
      contextInfo += `‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ character_sheet tool –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π room_id: "${request.roomId}"\n`;
      contextInfo += '=== –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ===\n';
      
      messages.push({ role: 'system', content: contextInfo });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    const playerPrefix = request.playerName ? `${request.playerName}: ` : '';
    messages.push({ role: 'user', content: `${playerPrefix}${request.playerMessage}` });

    return { messages, context, sessionId };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ø–∞–º—è—Ç—å
   */
  async processPlayerMessage(request: DMRequest): Promise<DMResponse> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –ø–∞–º—è—Ç—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
      let memoryResult: any = null;
      if (request.useMemory !== false) {
        try {
          memoryResult = await this.memoryManager.processUserMessage(
            request.roomId,
            request.playerMessage,
            request.playerName
          );
          console.log(`üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å: ${request.playerName || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'}`);
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –ø–∞–º—è—Ç—å:', error);
        }
      }

      // –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const { messages, context, sessionId } = await this.buildMessagesWithMemory(request);
      const tools = request.enableTools ? toolsService.getAllTools() : undefined;
      
      const elizaRequest: ElizaChatRequest = {
        model: process.env.ELIZA_MODEL || 'claude-3-5-sonnet-20241022',
        messages,
        max_tokens: 1000,
        temperature: 0.8,
        tools,
        tool_choice: tools ? 'auto' : undefined,
      };

      const response = await this.eliza.createChatCompletion(elizaRequest);
      const message = response.choices[0]?.message;
      
      if (!message) {
        throw new Error('No response message from Eliza');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ tool calls (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É DMAgent)
      let toolCalls: ToolCallResult[] = [];
      let finalContent = message.content || '';

      if (message.tool_calls && message.tool_calls.length > 0) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º tool calls
        for (const toolCall of message.tool_calls) {
          try {
            if (toolCall.type === 'function' && 'function' in toolCall) {
              const functionCall = toolCall.function;
              const args = JSON.parse(functionCall.arguments);
              const toolRequest: ToolCallRequest = {
                name: functionCall.name,
                arguments: args
              };
              
              const toolResult = toolsService.executeToolCall(toolRequest);
              toolCalls.push({
                name: functionCall.name,
                arguments: args,
                result: toolResult.content,
                success: toolResult.success
              });

              // –î–æ–±–∞–≤–ª—è–µ–º assistant message —Å tool_use
              if (toolCalls.length === 1) {
                const anthropicContent = [];
                if (message.content) {
                  anthropicContent.push({
                    type: 'text',
                    text: message.content
                  });
                }
                
                for (const tc of message.tool_calls) {
                  if (tc.type === 'function' && 'function' in tc) {
                    anthropicContent.push({
                      type: 'tool_use',
                      id: tc.id,
                      name: tc.function.name,
                      input: JSON.parse(tc.function.arguments)
                    });
                  }
                }
                
                messages.push({
                  role: 'assistant',
                  content: anthropicContent
                });
              }

              // –î–æ–±–∞–≤–ª—è–µ–º tool result
              if (!messages.find(m => m.role === 'user' && Array.isArray(m.content))) {
                messages.push({
                  role: 'user',
                  content: []
                });
              }
              
              const lastUserMessage = messages[messages.length - 1];
              if (Array.isArray(lastUserMessage.content)) {
                lastUserMessage.content.push({
                  type: 'tool_result',
                  tool_use_id: toolCall.id,
                  content: toolResult.content
                });
              }
            }
          } catch (error) {
            console.error('Tool call execution error:', error);
            let fallbackName = 'unknown';
            if (toolCall.type === 'function' && 'function' in toolCall) {
              fallbackName = toolCall.function.name;
            }
            toolCalls.push({
              name: fallbackName,
              arguments: {},
              result: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
              success: false
            });
          }
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ tool calls
        const finalRequest: ElizaChatRequest = {
          model: process.env.ELIZA_MODEL || 'claude-3-5-sonnet-20241022',
          messages,
          max_tokens: 1000,
          temperature: 0.8,
          tools,
        };

        const finalResponse = await this.eliza.createChatCompletion(finalRequest);
        finalContent = finalResponse.choices[0]?.message?.content || finalContent;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò-–º–∞—Å—Ç–µ—Ä–∞ –≤ –ø–∞–º—è—Ç—å
      if (request.useMemory !== false && sessionId) {
        try {
          await this.memoryManager.processAssistantResponse(
            sessionId,
            finalContent,
            this.estimateTokens(finalContent)
          );
          console.log(`üíæ –û—Ç–≤–µ—Ç –ò–ò-–º–∞—Å—Ç–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç—å`);
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò –≤ –ø–∞–º—è—Ç—å:', error);
        }
      }

      return {
        content: finalContent,
        timestamp: new Date().toISOString(),
        type: this.determineResponseType(finalContent),
        toolCalls: toolCalls.length > 0 ? toolCalls : undefined,
        context,
        sessionId
      };

    } catch (error) {
      console.error('DM Agent With Memory Error:', error);
      throw new Error('Failed to process DM response with memory');
    }
  }

  /**
   * –°—Ç—Ä–∏–º–∏–Ω–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–º—è—Ç–∏
   */
  async processPlayerMessageStream(request: DMRequest): Promise<AsyncIterable<string>> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –ø–∞–º—è—Ç—å
      if (request.useMemory !== false) {
        try {
          await this.memoryManager.processUserMessage(
            request.roomId,
            request.playerMessage,
            request.playerName
          );
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ:', error);
        }
      }

      const { messages } = await this.buildMessagesWithMemory(request);
      const tools = request.enableTools ? toolsService.getAllTools() : undefined;
      
      const elizaRequest: ElizaChatRequest = {
        model: process.env.ELIZA_MODEL || 'claude-3-5-sonnet-20241022',
        messages,
        max_tokens: 1000,
        temperature: 0.8,
        stream: true,
        tools,
        tool_choice: tools ? 'auto' : undefined,
      };

      const stream = await this.eliza.createStreamingChatCompletion(elizaRequest);
      return this.processStream(stream, request);
    } catch (error) {
      console.error('DM Agent Memory Streaming Error:', error);
      throw new Error('Failed to process DM streaming response with memory');
    }
  }

  private async* processStream(stream: any, request: DMRequest): AsyncIterable<string> {
    let fullContent = '';
    try {
      for await (const chunk of stream) {
        if (chunk.choices[0]?.delta?.content) {
          const content = chunk.choices[0].delta.content;
          fullContent += content;
          yield content;
        }
      }

      // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
      if (request.useMemory !== false && fullContent) {
        try {
          const session = await this.memoryManager.getActiveSession(request.roomId);
          if (session) {
            await this.memoryManager.processAssistantResponse(
              session.id,
              fullContent,
              this.estimateTokens(fullContent)
            );
            console.log(`üíæ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ò–ò —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç—å`);
          }
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å:', error);
        }
      }
    } catch (error) {
      console.error('Stream processing error:', error);
      throw error;
    }
  }

  private determineResponseType(content: string): DMResponse['type'] {
    const lower = content.toLowerCase();
    if (lower.includes('–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞') || lower.includes('–∞—Ç–∞–∫')) return 'combat';
    if (content.includes('"') || content.includes('‚Äî')) return 'npc_dialogue';
    if (lower.includes('–≤–∏–¥–∏—Ç–µ') || lower.includes('–ø–µ—Ä–µ–¥ –≤–∞–º–∏')) return 'description';
    return 'narration';
  }

  private estimateTokens(content: string): number {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: ~4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    return Math.ceil(content.length / 4);
  }

  async testConnection(): Promise<boolean> {
    try {
      const res = await this.processPlayerMessage({ 
        playerMessage: '–ü—Ä–∏–≤–µ—Ç!', 
        roomId: 'test',
        useMemory: false // –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      });
      return !!res.content;
    } catch (error) {
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç —Å –ø–∞–º—è—Ç—å—é
   */
  async testWithMemory(): Promise<void> {
    console.log('üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DMAgent —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏...');
    
    const testRoomId = 'memory_test_room';
    const testMessages = [
      { message: '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞, —è —ç–ª—å—Ñ-—Å–ª–µ–¥–æ–ø—ã—Ç.', player: '–ê–ª–∏—Å–∞' },
      { message: '–Ø –æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏. –ß—Ç–æ —è –≤–∏–∂—É?', player: '–ê–ª–∏—Å–∞' },
      { message: '–ë—Ä–æ—Å–∞–π –∑–∞ –º–µ–Ω—è –ø—Ä–æ–≤–µ—Ä–∫—É –í–æ—Å–ø—Ä–∏—è—Ç–∏—è d20+3', player: '–ê–ª–∏—Å–∞' }
    ];

    for (let i = 0; i < testMessages.length; i++) {
      const { message, player } = testMessages[i];
      try {
        console.log(`\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ ${i + 1}: "${message}"`);
        
        const response = await this.processPlayerMessage({
          playerMessage: message,
          playerName: player,
          roomId: testRoomId,
          enableTools: true,
          useMemory: true
        });
        
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.content.substring(0, 100)}...`);
        console.log(`üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${response.context?.recent_messages.length || 0} —Å–æ–æ–±—â–µ–Ω–∏–π, ${response.context?.active_entities.length || 0} —Å—É—â–Ω–æ—Å—Ç–µ–π`);
        
        if (response.toolCalls) {
          console.log(`üîß Tool calls: ${response.toolCalls.length}`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
    try {
      const stats = await this.memoryManager.getStats();
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞:');
      console.log(`   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${stats.total_messages}`);
      console.log(`   üéÆ –°–µ—Å—Å–∏–π: ${stats.total_sessions}`);
      console.log(`   üè∑Ô∏è –°—É—â–Ω–æ—Å—Ç–µ–π: ${stats.total_entities}`);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏:', error);
    }
  }
}
