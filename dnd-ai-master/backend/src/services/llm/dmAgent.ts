import { OpenRouterService, ChatRequest } from './openrouter.js';
import { toolsService, ToolCallRequest } from '../tools/index.js';
import OpenAI from 'openai';

export interface DMResponse {
  content: string;
  timestamp: string;
  type: 'narration' | 'npc_dialogue' | 'combat' | 'description' | 'system';
  toolCalls?: ToolCallResult[];
}

export interface ToolCallResult {
  name: string;
  arguments: any;
  result: string;
  success: boolean;
}

export interface DMRequest {
  playerMessage: string;
  playerName?: string;
  roomId: string;
  context?: {
    currentScene?: string;
    recentHistory?: string[];
    activeNPCs?: string[];
    currentObjective?: string;
  };
  enableTools?: boolean;
}

export class DMAgentService {
  private openRouter: OpenRouterService;
  private systemPrompt: string;

  constructor(openRouter: OpenRouterService) {
    this.openRouter = openRouter;
    this.systemPrompt = this.createSystemPrompt();
  }

  private createSystemPrompt(): string {
    return `–¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä D&D, –≤–µ–¥—É—â–∏–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é. –¢–≤–æ—è —Ä–æ–ª—å - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∂–∏–≤–æ–π –º–∏—Ä, –æ–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ü–µ–Ω—ã (3-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∏ NPC –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤. 

–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ:
- –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
- –î–ª—è –∞—Ç–∞–∫ –∏ —É—Ä–æ–Ω–∞ –≤ –±–æ—é
- –î–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

–ü–∏—à–∏ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ª–∏—Ü–∞ ("–í—ã –≤–∏–¥–∏—Ç–µ..."). –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –∑–∞–∫—É–ª–∏—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ –¥–∞–≤–∞–π –∏–≥—Ä–æ–∫–∞–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É.`;
  }

  private buildMessages(request: DMRequest): OpenAI.Chat.Completions.ChatCompletionMessageParam[] {
    const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      { role: 'system', content: this.systemPrompt }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    let contextInfo = '–ö–û–ù–¢–ï–ö–°–¢ –°–ï–°–°–ò–ò:\n';
    contextInfo += `–ö–æ–º–Ω–∞—Ç–∞: ${request.roomId}\n`;
    
    if (request.context) {
      if (request.context.currentScene) contextInfo += `–°—Ü–µ–Ω–∞: ${request.context.currentScene}\n`;
      if (request.context.currentObjective) contextInfo += `–¶–µ–ª—å: ${request.context.currentObjective}\n`;
      if (request.context.activeNPCs?.length) contextInfo += `–ê–∫—Ç–∏–≤–Ω—ã–µ NPC: ${request.context.activeNPCs.join(', ')}\n`;
      if (request.context.recentHistory?.length) contextInfo += `–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n${request.context.recentHistory.join('\n')}\n`;
    }
    
    contextInfo += `\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ character_sheet tool –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π room_id: "${request.roomId}"\n`;
    
    if (contextInfo.length > '–ö–û–ù–¢–ï–ö–°–¢ –°–ï–°–°–ò–ò:\n'.length) {
      messages.push({ role: 'system', content: contextInfo });
    }
    
    const playerPrefix = request.playerName ? `${request.playerName}: ` : '';
    messages.push({ role: 'user', content: `${playerPrefix}${request.playerMessage}` });
    return messages;
  }

  async processPlayerMessage(request: DMRequest): Promise<DMResponse> {
    try {
      const messages = this.buildMessages(request);
      const tools = request.enableTools ? toolsService.getAllTools() : undefined;
      
      const aiRequest: ChatRequest = {
        model: process.env.DM_MODEL || 'anthropic/claude-3.5-sonnet',
        messages,
        max_tokens: 1000,
        temperature: 0.8,
        tools,
        tool_choice: tools ? 'auto' : undefined,
      };

      const response = await this.openRouter.createChatCompletion(aiRequest);
      const message = response.choices[0]?.message;
      
      if (!message) {
        throw new Error('No response message from LLM');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ tool calls –µ—Å–ª–∏ –µ—Å—Ç—å
      let toolCalls: ToolCallResult[] = [];
      let finalContent = message.content || '';

      if (message.tool_calls && message.tool_calls.length > 0) {
                 // –í—ã–ø–æ–ª–Ω—è–µ–º tool calls
         for (const toolCall of message.tool_calls) {
           try {
             // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ tool call
             if (toolCall.type === 'function' && 'function' in toolCall) {
               const functionCall = toolCall.function;
               const args = JSON.parse(functionCall.arguments);
               const toolRequest: ToolCallRequest = {
                 name: functionCall.name,
                 arguments: args
               };
               
               const toolResult = toolsService.executeToolCall(toolRequest);
               toolCalls.push({
                 name: functionCall.name,
                 arguments: args,
                 result: toolResult.content,
                 success: toolResult.success
               });

               // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç tool call –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
               messages.push(message);
               messages.push({
                 role: 'tool',
                 tool_call_id: toolCall.id,
                 content: toolResult.content
               });
             }
            } catch (error) {
              console.error('Tool call execution error:', error);
              let fallbackName = 'unknown';
              if (toolCall.type === 'function' && 'function' in toolCall) {
                fallbackName = toolCall.function.name;
              }
              toolCalls.push({
                name: fallbackName,
                arguments: {},
                result: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
                success: false
              });
            }
         }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ tool calls
        const finalRequest: ChatRequest = {
          model: process.env.DM_MODEL || 'anthropic/claude-3.5-sonnet',
          messages,
          max_tokens: 1000,
          temperature: 0.8,
          tools,
        };

        const finalResponse = await this.openRouter.createChatCompletion(finalRequest);
        finalContent = finalResponse.choices[0]?.message?.content || finalContent;
      }

      return {
        content: finalContent,
        timestamp: new Date().toISOString(),
        type: this.determineResponseType(finalContent),
        toolCalls: toolCalls.length > 0 ? toolCalls : undefined,
      };
    } catch (error) {
      console.error('DM Agent Error:', error);
      throw new Error('Failed to process DM response');
    }
  }

  async processPlayerMessageStream(request: DMRequest): Promise<AsyncIterable<string>> {
    try {
      const messages = this.buildMessages(request);
      const tools = request.enableTools ? toolsService.getAllTools() : undefined;
      
      const aiRequest: ChatRequest = {
        model: process.env.DM_MODEL || 'anthropic/claude-3.5-sonnet',
        messages,
        max_tokens: 1000,
        temperature: 0.8,
        stream: true,
        tools,
        tool_choice: tools ? 'auto' : undefined,
      };
      const stream = await this.openRouter.createStreamingChatCompletion(aiRequest);
      return this.processStream(stream);
    } catch (error) {
      console.error('DM Agent Streaming Error:', error);
      throw new Error('Failed to process DM streaming response');
    }
  }

  private async* processStream(stream: any): AsyncIterable<string> {
    try {
      for await (const chunk of stream) {
        if (chunk.choices[0]?.delta?.content) {
          yield chunk.choices[0].delta.content;
        }
      }
    } catch (error) {
      console.error('Stream processing error:', error);
      throw error;
    }
  }

  private determineResponseType(content: string): DMResponse['type'] {
    const lower = content.toLowerCase();
    if (lower.includes('–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞') || lower.includes('–∞—Ç–∞–∫')) return 'combat';
    if (content.includes('"') || content.includes('‚Äî')) return 'npc_dialogue';
    if (lower.includes('–≤–∏–¥–∏—Ç–µ') || lower.includes('–ø–µ—Ä–µ–¥ –≤–∞–º–∏')) return 'description';
    return 'narration';
  }

  async testConnection(): Promise<boolean> {
    try {
      const res = await this.processPlayerMessage({ playerMessage: '–ü—Ä–∏–≤–µ—Ç!', roomId: 'test' });
      return !!res.content;
    } catch (error) {
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç Tool Calling —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
   */
  async testToolCalling(): Promise<void> {
    console.log('üé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tool Calling...');
    
    const testMessages = [
      '–ë—Ä–æ—Å–∞–π –∑–∞ –º–µ–Ω—è d20 –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –í–æ—Å–ø—Ä–∏—è—Ç–∏—è',
      '–ú–Ω–µ –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å 3d6 –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫',
      '–ê—Ç–∞–∫—É—é –º–µ—á–æ–º. –ë—Ä–æ—Å–æ–∫ –Ω–∞ –∞—Ç–∞–∫—É?'
    ];

    for (const message of testMessages) {
      try {
        console.log(`\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
        const response = await this.processPlayerMessage({
          playerMessage: message,
          roomId: 'test',
          enableTools: true
        });
        
        console.log(`‚úÖ –û—Ç–≤–µ—Ç: ${response.content}`);
        if (response.toolCalls) {
          console.log(`üîß Tool calls: ${response.toolCalls.length}`);
          response.toolCalls.forEach((call, i) => {
            console.log(`   ${i + 1}. ${call.name}: ${call.result}`);
          });
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }
  }
}
