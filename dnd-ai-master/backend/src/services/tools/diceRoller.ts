export interface DiceRollRequest {
  dice: string; // –ù–∞–ø—Ä–∏–º–µ—Ä: "1d20", "3d6+2", "2d8-1"
  description?: string; // –û–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ—Å–∫–∞
  playerName?: string; // –ò–º—è –∏–≥—Ä–æ–∫–∞
}

export interface DiceRollResult {
  request: string;
  rolls: number[];
  modifier: number;
  total: number;
  description?: string;
  playerName?: string;
  timestamp: string;
  breakdown: string; // –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –±—Ä–æ—Å–∫–∞
}

export interface DiceRollToolDefinition {
  name: "roll_dice";
  description: "–ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫–∏ –¥–ª—è D&D. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é —Ç–∏–ø–∞ '1d20+5', '3d6-2', '2d8'";
  input_schema: {
    type: "object";
    properties: {
      dice: {
        type: "string";
        description: "–§–æ—Ä–º—É–ª–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XdY+Z, –≥–¥–µ X - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤, Y - —Ç–∏–ø –∫—É–±–∏–∫–∞, Z - –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä";
        pattern: "^\\d+d\\d+(\\+\\d+|\\-\\d+)?$";
      };
      description: {
        type: "string";
        description: "–û–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ê—Ç–∞–∫–∞ –º–µ—á–æ–º', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –í–æ—Å–ø—Ä–∏—è—Ç–∏—è')";
      };
      player_name: {
        type: "string";
        description: "–ò–º—è –∏–≥—Ä–æ–∫–∞, —Å–æ–≤–µ—Ä—à–∞—é—â–µ–≥–æ –±—Ä–æ—Å–æ–∫";
      };
    };
    required: ["dice"];
  };
}

export class DiceRollerService {
  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤
   * @param diceString –°—Ç—Ä–æ–∫–∞ —Ç–∏–ø–∞ "1d20+5"
   * @returns –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –±—Ä–æ—Å–∫–∞
   */
  private parseDiceString(diceString: string): { count: number; sides: number; modifier: number } {
    const regex = /^(\d+)d(\d+)([\+\-]\d+)?$/i;
    const match = diceString.match(regex);

    if (!match) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É–±–∏–∫–æ–≤: ${diceString}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç XdY+Z (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1d20+5)`);
    }

    const count = parseInt(match[1]);
    const sides = parseInt(match[2]);
    const modifier = match[3] ? parseInt(match[3]) : 0;

    if (count <= 0 || count > 100) {
      throw new Error(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100, –ø–æ–ª—É—á–µ–Ω–æ: ${count}`);
    }

    if (sides <= 1 || sides > 1000) {
      throw new Error(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 1000, –ø–æ–ª—É—á–µ–Ω–æ: ${sides}`);
    }

    return { count, sides, modifier };
  }

  /**
   * –ë—Ä–æ—Å–∞–µ—Ç –æ–¥–∏–Ω –∫—É–±–∏–∫
   * @param sides –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π –∫—É–±–∏–∫–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
   */
  private rollSingleDie(sides: number): number {
    return Math.floor(Math.random() * sides) + 1;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
   * @param request –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ—Å–∫–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
   */
  rollDice(request: DiceRollRequest): DiceRollResult {
    try {
      const { count, sides, modifier } = this.parseDiceString(request.dice);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–∫–∏
      const rolls: number[] = [];
      for (let i = 0; i < count; i++) {
        rolls.push(this.rollSingleDie(sides));
      }

      const rollSum = rolls.reduce((sum, roll) => sum + roll, 0);
      const total = rollSum + modifier;

      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É
      let breakdown = `${count}d${sides}`;
      if (rolls.length <= 10) {
        breakdown += ` [${rolls.join(', ')}] = ${rollSum}`;
      } else {
        breakdown += ` (${rollSum})`;
      }
      
      if (modifier !== 0) {
        breakdown += ` ${modifier >= 0 ? '+' : ''}${modifier} = ${total}`;
      } else {
        breakdown += ` (–∏—Ç–æ–≥–æ: ${total})`;
      }

      return {
        request: request.dice,
        rolls,
        modifier,
        total,
        description: request.description,
        playerName: request.playerName,
        timestamp: new Date().toISOString(),
        breakdown
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è Anthropic Claude API
   */
  getToolDefinition(): DiceRollToolDefinition {
    return {
      name: "roll_dice",
      description: "–ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫–∏ –¥–ª—è D&D. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é —Ç–∏–ø–∞ '1d20+5', '3d6-2', '2d8'",
      input_schema: {
        type: "object",
        properties: {
          dice: {
            type: "string",
            description: "–§–æ—Ä–º—É–ª–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XdY+Z, –≥–¥–µ X - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤, Y - —Ç–∏–ø –∫—É–±–∏–∫–∞, Z - –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
            pattern: "^\\d+d\\d+(\\+\\d+|\\-\\d+)?$"
          },
          description: {
            type: "string",
            description: "–û–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ê—Ç–∞–∫–∞ –º–µ—á–æ–º', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –í–æ—Å–ø—Ä–∏—è—Ç–∏—è')"
          },
          player_name: {
            type: "string", 
            description: "–ò–º—è –∏–≥—Ä–æ–∫–∞, —Å–æ–≤–µ—Ä—à–∞—é—â–µ–≥–æ –±—Ä–æ—Å–æ–∫"
          }
        },
        required: ["dice"]
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç LLM
   * @param args –ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç LLM
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è LLM
   */
  handleToolCall(args: any): string {
    try {
      const request: DiceRollRequest = {
        dice: args.dice,
        description: args.description,
        playerName: args.player_name
      };

      const result = this.rollDice(request);
      
      let response = `üé≤ **${result.breakdown}**`;
      
      if (result.description) {
        response = `üé≤ **${result.description}**: ${result.breakdown}`;
      }
      
      if (result.playerName) {
        response = `${result.playerName} - ` + response;
      }

      return response;
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –±—Ä–æ—Å–∫–æ–≤
   */
  test(): void {
    console.log('üé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DiceRollerService...');
    
    const testCases = [
      '1d20',
      '1d20+5',
      '3d6',
      '2d8-1',
      '4d6'
    ];

    testCases.forEach(dice => {
      try {
        const result = this.rollDice({ dice, description: `–¢–µ—Å—Ç: ${dice}` });
        console.log(`‚úÖ ${dice}: ${result.breakdown}`);
      } catch (error) {
        console.log(`‚ùå ${dice}: ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
      }
    });
  }
} 
