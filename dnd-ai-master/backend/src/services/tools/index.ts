import { DiceRollerService, DiceRollToolDefinition } from './diceRoller.js';
import { CharacterSheetService } from './characterSheet.js';
import { NotesManagerService } from './notesManager.js';
import { AdvancedDiceService } from './advancedDice.js';
import { RulesReferenceService } from './rulesReference.js';
import { InitiativeTrackerService } from './initiativeTracker.js';
import { ToolDefinition } from './BaseTool.js';

export interface ToolResult {
  content: string;
  success: boolean;
  timestamp: string;
}

export interface ToolCallRequest {
  name: string;
  arguments: any;
}

export class ToolsService {
  private diceRoller: DiceRollerService;
  private characterSheet: CharacterSheetService;
  private notesManager: NotesManagerService;
  private advancedDice: AdvancedDiceService;
  private rulesReference: RulesReferenceService;
  private initiativeTracker: InitiativeTrackerService;

  constructor() {
    this.diceRoller = new DiceRollerService();
    this.characterSheet = new CharacterSheetService();
    this.notesManager = new NotesManagerService();
    this.advancedDice = new AdvancedDiceService();
    this.rulesReference = new RulesReferenceService();
    this.initiativeTracker = new InitiativeTrackerService();
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è Anthropic Claude API
   */
  getAllTools(): ToolDefinition[] {
    return [
      this.diceRoller.getToolDefinition(),
      this.characterSheet.getToolDefinition(),
      this.notesManager.getToolDefinition(),
      this.advancedDice.getToolDefinition(),
      this.rulesReference.getToolDefinition(),
      this.initiativeTracker.getToolDefinition()
    ];
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @param toolCall –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  executeToolCall(toolCall: ToolCallRequest): ToolResult {
    const timestamp = new Date().toISOString();

    try {
      let content: string;

      switch (toolCall.name) {
        case 'roll_dice':
          content = this.diceRoller.handleToolCall(toolCall.arguments);
          break;
          
        case 'character_sheet':
          content = this.characterSheet.handleToolCall(toolCall.arguments);
          break;
          
        case 'notes_manager':
          content = this.notesManager.handleToolCall(toolCall.arguments);
          break;
          
        case 'advanced_dice':
          content = this.advancedDice.handleToolCall(toolCall.arguments);
          break;
          
        case 'rules_reference':
          content = this.rulesReference.handleToolCall(toolCall.arguments);
          break;
          
        case 'initiative_tracker':
          content = this.initiativeTracker.handleToolCall(toolCall.arguments);
          break;
          
        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${toolCall.name}`);
      }

      return {
        content,
        success: true,
        timestamp
      };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolCall.name}:`, error);
      return {
        content: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        success: false,
        timestamp
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
   */
  isToolSupported(toolName: string): boolean {
    const supportedTools = [
      'roll_dice',
      'character_sheet',
      'notes_manager',
      'advanced_dice',
      'rules_reference',
      'initiative_tracker'
    ];
    return supportedTools.includes(toolName);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
   */
  getToolsInfo(): Record<string, any> {
    return {
      roll_dice: {
        name: 'roll_dice',
        description: '–ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫–∏ –¥–ª—è D&D',
        examples: [
          '1d20 - –æ–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫ d20',
          '1d20+5 - –±—Ä–æ—Å–æ–∫ d20 —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º +5',
          '3d6 - –±—Ä–æ—Å–æ–∫ —Ç—Ä–µ—Ö —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤',
          '2d8-1 - –±—Ä–æ—Å–æ–∫ –¥–≤—É—Ö –≤–æ—Å—å–º–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º -1'
        ]
      },
      character_sheet: {
        name: 'character_sheet',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ D&D 5e',
        examples: [
          '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
          '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ',
          '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ'
        ]
      },
      notes_manager: {
        name: 'notes_manager',
        description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫',
        examples: [
          '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ –≤–∞–∂–Ω–æ–º NPC',
          '–ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É',
          '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        ]
      },
      advanced_dice: {
        name: 'advanced_dice',
        description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±—Ä–æ—Å–∫–∏ –∫—É–±–∏–∫–æ–≤',
        examples: [
          '–ë—Ä–æ—Å–æ–∫ —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º',
          '–ë—Ä–æ—Å–æ–∫ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º',
          '–í–∑—Ä—ã–≤–∞—é—â–∏–µ—Å—è –∫—É–±–∏–∫–∏',
          '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±—Ä–æ—Å–∫–∏'
        ]
      },
      rules_reference: {
        name: 'rules_reference',
        description: '–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º D&D 5e',
        examples: [
          '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏',
          '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
          '–ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª'
        ]
      },
      initiative_tracker: {
        name: 'initiative_tracker',
        description: '–¢—Ä–µ–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –¥–ª—è –±–æ–µ–≤—ã—Ö —Å—Ü–µ–Ω',
        examples: [
          '–ù–∞—á–∞—Ç—å –±–æ–π',
          '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞',
          '–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥',
          '–°—Ç–∞—Ç—É—Å –±–æ—è'
        ]
      }
    };
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
   */
  testAllTools(): void {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º DiceRoller
    this.diceRoller.test();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã —á–µ—Ä–µ–∑ ToolsService
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ToolsService...');
    const testCalls = [
      { name: 'roll_dice', arguments: { dice: '1d20+5', description: '–ê—Ç–∞–∫–∞ –º–µ—á–æ–º', player_name: '–ê–ª–∏—Å–∞' } },
      { name: 'advanced_dice', arguments: { type: 'advantage', dice: '1d20+3', description: '–ê—Ç–∞–∫–∞ —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º' } },
      { name: 'character_sheet', arguments: { action: 'list', room_id: 'test_room' } },
      { name: 'notes_manager', arguments: { action: 'get_categories', room_id: 'test_room' } },
      { name: 'rules_reference', arguments: { type: 'spell', name: 'fireball' } },
      { name: 'initiative_tracker', arguments: { action: 'get_status', room_id: 'test_room' } },
      { name: 'invalid_tool', arguments: {} }
    ];

    testCalls.forEach((call, index) => {
      const result = this.executeToolCall(call);
      console.log(`Test ${index + 1}: ${result.success ? '‚úÖ' : '‚ùå'} ${result.content}`);
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const toolsService = new ToolsService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ –∫–ª–∞—Å—Å—ã
export { DiceRollerService } from './diceRoller.js';
export type { DiceRollRequest, DiceRollResult, DiceRollToolDefinition } from './diceRoller.js';
