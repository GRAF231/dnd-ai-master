import { DiceRollerService, DiceRollToolDefinition } from './diceRoller.js';

export interface ToolResult {
  content: string;
  success: boolean;
  timestamp: string;
}

export interface ToolCallRequest {
  name: string;
  arguments: any;
}

export class ToolsService {
  private diceRoller: DiceRollerService;

  constructor() {
    this.diceRoller = new DiceRollerService();
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è OpenRouter/OpenAI
   */
  getAllTools(): DiceRollToolDefinition[] {
    return [
      this.diceRoller.getToolDefinition()
    ];
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @param toolCall –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  executeToolCall(toolCall: ToolCallRequest): ToolResult {
    const timestamp = new Date().toISOString();

    try {
      let content: string;

      switch (toolCall.name) {
        case 'roll_dice':
          content = this.diceRoller.handleToolCall(toolCall.arguments);
          break;
          
        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${toolCall.name}`);
      }

      return {
        content,
        success: true,
        timestamp
      };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${toolCall.name}:`, error);
      return {
        content: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        success: false,
        timestamp
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
   */
  isToolSupported(toolName: string): boolean {
    const supportedTools = ['roll_dice'];
    return supportedTools.includes(toolName);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
   */
  getToolsInfo(): Record<string, any> {
    return {
      roll_dice: {
        name: 'roll_dice',
        description: '–ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫–∏ –¥–ª—è D&D',
        examples: [
          '1d20 - –æ–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫ d20',
          '1d20+5 - –±—Ä–æ—Å–æ–∫ d20 —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º +5',
          '3d6 - –±—Ä–æ—Å–æ–∫ —Ç—Ä–µ—Ö —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤',
          '2d8-1 - –±—Ä–æ—Å–æ–∫ –¥–≤—É—Ö –≤–æ—Å—å–º–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º -1'
        ]
      }
    };
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
   */
  testAllTools(): void {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º DiceRoller
    this.diceRoller.test();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã —á–µ—Ä–µ–∑ ToolsService
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ToolsService...');
    const testCalls = [
      { name: 'roll_dice', arguments: { dice: '1d20+5', description: '–ê—Ç–∞–∫–∞ –º–µ—á–æ–º', player_name: '–ê–ª–∏—Å–∞' } },
      { name: 'roll_dice', arguments: { dice: '3d6' } },
      { name: 'invalid_tool', arguments: {} }
    ];

    testCalls.forEach((call, index) => {
      const result = this.executeToolCall(call);
      console.log(`Test ${index + 1}: ${result.success ? '‚úÖ' : '‚ùå'} ${result.content}`);
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const toolsService = new ToolsService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ –∫–ª–∞—Å—Å—ã
export { DiceRollerService } from './diceRoller.js';
export type { DiceRollRequest, DiceRollResult, DiceRollToolDefinition } from './diceRoller.js';
