import { BaseTool, ToolDefinition } from './BaseTool.js';
import { fileStorage } from './utils/FileStorage.js';
import { v4 as uuidv4 } from 'uuid';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ—è
 */
export interface Combatant {
  id: string;
  name: string;
  initiative: number;
  hitPoints: {
    current: number;
    maximum: number;
  };
  armorClass: number;
  type: 'player' | 'npc' | 'monster';
  conditions: string[];
  playerName?: string; // –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–æ–≤
  notes: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ–µ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
 */
export interface CombatRound {
  number: number;
  currentTurn: number; // –ò–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  combatants: Combatant[];
  startTime: string;
  endTime?: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è
 */
export interface Combat {
  id: string;
  roomId: string;
  isActive: boolean;
  currentRound: CombatRound;
  rounds: CombatRound[];
  created: string;
  ended?: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–µ–≤–æ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤, –∑–¥–æ—Ä–æ–≤—å–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export class InitiativeTrackerService implements BaseTool {
  
  getName(): string {
    return 'initiative_tracker';
  }

  getDescription(): string {
    return '–¢—Ä–µ–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –¥–ª—è –±–æ–µ–≤—ã—Ö —Å—Ü–µ–Ω';
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –±–æ–π
   */
  startCombat(roomId: string): Combat {
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ–π –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    this.endCombat(roomId);
    
    const combatId = uuidv4();
    const firstRound: CombatRound = {
      number: 1,
      currentTurn: 0,
      combatants: [],
      startTime: new Date().toISOString()
    };
    
    const combat: Combat = {
      id: combatId,
      roomId,
      isActive: true,
      currentRound: firstRound,
      rounds: [firstRound],
      created: new Date().toISOString()
    };
    
    fileStorage.save(`combat_${roomId}`, combat);
    return combat;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
   */
  getActiveCombat(roomId: string): Combat | null {
    const combat = fileStorage.load<Combat>(`combat_${roomId}`);
    return combat && combat.isActive ? combat : null;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–æ–π
   */
  addCombatant(roomId: string, combatant: Omit<Combatant, 'id'>): boolean {
    const combat = this.getActiveCombat(roomId);
    if (!combat) return false;
    
    const newCombatant: Combatant = {
      ...combatant,
      id: uuidv4()
    };
    
    combat.currentRound.combatants.push(newCombatant);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    combat.currentRound.combatants.sort((a, b) => b.initiative - a.initiative);
    
    fileStorage.save(`combat_${roomId}`, combat);
    return true;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –±–æ—è
   */
  removeCombatant(roomId: string, combatantId: string): boolean {
    const combat = this.getActiveCombat(roomId);
    if (!combat) return false;
    
    const index = combat.currentRound.combatants.findIndex(c => c.id === combatantId);
    if (index === -1) return false;
    
    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞, —Å–¥–≤–∏–≥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
    if (index < combat.currentRound.currentTurn) {
      combat.currentRound.currentTurn--;
    }
    
    combat.currentRound.combatants.splice(index, 1);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if (combat.currentRound.currentTurn >= combat.currentRound.combatants.length) {
      combat.currentRound.currentTurn = 0;
    }
    
    fileStorage.save(`combat_${roomId}`, combat);
    return true;
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
   */
  nextTurn(roomId: string): { currentCombatant: Combatant | null; newRound: boolean } {
    const combat = this.getActiveCombat(roomId);
    if (!combat || combat.currentRound.combatants.length === 0) {
      return { currentCombatant: null, newRound: false };
    }
    
    combat.currentRound.currentTurn++;
    let newRound = false;
    
    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    if (combat.currentRound.currentTurn >= combat.currentRound.combatants.length) {
      newRound = true;
      combat.currentRound.currentTurn = 0;
      combat.currentRound.endTime = new Date().toISOString();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
      const nextRound: CombatRound = {
        number: combat.currentRound.number + 1,
        currentTurn: 0,
        combatants: [...combat.currentRound.combatants], // –ö–æ–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        startTime: new Date().toISOString()
      };
      
      combat.rounds.push(nextRound);
      combat.currentRound = nextRound;
    }
    
    const currentCombatant = combat.currentRound.combatants[combat.currentRound.currentTurn];
    
    fileStorage.save(`combat_${roomId}`, combat);
    return { currentCombatant, newRound };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  updateCombatantHP(roomId: string, combatantId: string, newHP: number): boolean {
    const combat = this.getActiveCombat(roomId);
    if (!combat) return false;
    
    const combatant = combat.currentRound.combatants.find(c => c.id === combatantId);
    if (!combatant) return false;
    
    combatant.hitPoints.current = Math.max(0, Math.min(newHP, combatant.hitPoints.maximum));
    
    fileStorage.save(`combat_${roomId}`, combat);
    return true;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  updateCombatantCondition(roomId: string, combatantId: string, condition: string, add: boolean): boolean {
    const combat = this.getActiveCombat(roomId);
    if (!combat) return false;
    
    const combatant = combat.currentRound.combatants.find(c => c.id === combatantId);
    if (!combatant) return false;
    
    if (add) {
      if (!combatant.conditions.includes(condition)) {
        combatant.conditions.push(condition);
      }
    } else {
      const index = combatant.conditions.indexOf(condition);
      if (index > -1) {
        combatant.conditions.splice(index, 1);
      }
    }
    
    fileStorage.save(`combat_${roomId}`, combat);
    return true;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –±–æ–π
   */
  endCombat(roomId: string): boolean {
    const combat = this.getActiveCombat(roomId);
    if (!combat) return false;
    
    combat.isActive = false;
    combat.ended = new Date().toISOString();
    combat.currentRound.endTime = new Date().toISOString();
    
    fileStorage.save(`combat_${roomId}`, combat);
    return true;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—è
   */
  getCombatStatus(roomId: string): string {
    const combat = this.getActiveCombat(roomId);
    if (!combat) return '–ë–æ–π –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω';
    
    if (combat.currentRound.combatants.length === 0) {
      return '–ë–æ–π –Ω–∞—á–∞—Ç, –Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã';
    }
    
    const currentCombatant = combat.currentRound.combatants[combat.currentRound.currentTurn];
    let status = `‚öîÔ∏è **–†–∞—É–Ω–¥ ${combat.currentRound.number}**\n`;
    status += `üéØ **–•–æ–¥:** ${currentCombatant.name}\n\n`;
    
    status += 'üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n';
    combat.currentRound.combatants.forEach((combatant, index) => {
      const isCurrent = index === combat.currentRound.currentTurn;
      const marker = isCurrent ? '‚Üí ' : '   ';
      const hp = `${combatant.hitPoints.current}/${combatant.hitPoints.maximum}`;
      const conditions = combatant.conditions.length > 0 ? ` [${combatant.conditions.join(', ')}]` : '';
      
      status += `${marker}**${combatant.name}** (${combatant.initiative}) | ‚ù§Ô∏è ${hp} | üõ°Ô∏è AC ${combatant.armorClass}${conditions}\n`;
    });
    
    return status;
  }

  validateArgs(args: any): boolean {
    if (!args.action || !args.room_id) return false;
    
    if (args.action === 'add_combatant') {
      return !!(args.name && typeof args.initiative === 'number' && args.hp_max && args.ac);
    }
    if (args.action === 'remove_combatant' || args.action === 'update_hp') {
      return !!args.combatant_id;
    }
    if (args.action === 'update_condition') {
      return !!(args.combatant_id && args.condition && typeof args.add === 'boolean');
    }
    
    return true; // –î–ª—è –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  }

  getToolDefinition(): ToolDefinition {
    return {
      name: "initiative_tracker",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–µ–≤–æ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –±–æ—è",
      input_schema: {
        type: "object",
        properties: {
          action: {
            type: "string",
            enum: ["start_combat", "end_combat", "add_combatant", "remove_combatant", "next_turn", "update_hp", "update_condition", "get_status"],
            description: "–î–µ–π—Å—Ç–≤–∏–µ —Å —Ç—Ä–µ–∫–µ—Ä–æ–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã"
          },
          room_id: {
            type: "string",
            description: "ID –∫–æ–º–Ω–∞—Ç—ã"
          },
          name: {
            type: "string",
            description: "–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ—è (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)"
          },
          initiative: {
            type: "number",
            minimum: 1,
            maximum: 30,
            description: "–ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã"
          },
          hp_current: {
            type: "number",
            minimum: 0,
            description: "–¢–µ–∫—É—â–∏–µ —Ö–∏—Ç—ã"
          },
          hp_max: {
            type: "number",
            minimum: 1,
            description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ö–∏—Ç—ã"
          },
          ac: {
            type: "number",
            minimum: 1,
            maximum: 30,
            description: "–ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏"
          },
          type: {
            type: "string",
            enum: ["player", "npc", "monster"],
            description: "–¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞"
          },
          player_name: {
            type: "string",
            description: "–ò–º—è –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–æ–≤)"
          },
          combatant_id: {
            type: "string",
            description: "ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ—è"
          },
          condition: {
            type: "string",
            description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
          },
          add: {
            type: "boolean",
            description: "true - –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, false - —É–±—Ä–∞—Ç—å"
          },
          notes: {
            type: "string",
            description: "–ó–∞–º–µ—Ç–∫–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ"
          }
        },
        required: ["action", "room_id"]
      }
    };
  }

  handleToolCall(args: any): string {
    try {
      switch (args.action) {
        case 'start_combat': {
          const combat = this.startCombat(args.room_id);
          return `‚öîÔ∏è **–ë–æ–π –Ω–∞—á–∞—Ç!**\n` +
                 `üÜî ID –±–æ—è: ${combat.id}\n` +
                 `–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é action "add_combatant"`;
        }
        
        case 'end_combat': {
          const success = this.endCombat(args.room_id);
          if (!success) {
            return `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`;
          }
          return `‚úÖ **–ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!**`;
        }
        
        case 'add_combatant': {
          const success = this.addCombatant(args.room_id, {
            name: args.name,
            initiative: args.initiative,
            hitPoints: {
              current: args.hp_current || args.hp_max,
              maximum: args.hp_max
            },
            armorClass: args.ac,
            type: args.type || 'npc',
            conditions: [],
            playerName: args.player_name,
            notes: args.notes || ''
          });
          
          if (!success) {
            return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ–π –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.`;
          }
          
          return `‚úÖ **${args.name}** –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ–π —Å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π ${args.initiative}`;
        }
        
        case 'remove_combatant': {
          const success = this.removeCombatant(args.room_id, args.combatant_id);
          if (!success) {
            return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å ID ${args.combatant_id}`;
          }
          return `‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –±–æ—è`;
        }
        
        case 'next_turn': {
          const result = this.nextTurn(args.room_id);
          if (!result.currentCombatant) {
            return `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
          }
          
          let response = '';
          if (result.newRound) {
            response += `üîÑ **–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥!**\n`;
          }
          response += `üéØ **–•–æ–¥:** ${result.currentCombatant.name}`;
          
          if (result.currentCombatant.conditions.length > 0) {
            response += ` [${result.currentCombatant.conditions.join(', ')}]`;
          }
          
          return response;
        }
        
        case 'update_hp': {
          const success = this.updateCombatantHP(args.room_id, args.combatant_id, args.hp_current);
          if (!success) {
            return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞`;
          }
          return `‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${args.hp_current} HP`;
        }
        
        case 'update_condition': {
          const success = this.updateCombatantCondition(args.room_id, args.combatant_id, args.condition, args.add);
          if (!success) {
            return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞`;
          }
          
          const action = args.add ? '–¥–æ–±–∞–≤–ª–µ–Ω–æ' : '—É–±—Ä–∞–Ω–æ';
          return `‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ "${args.condition}" ${action}`;
        }
        
        case 'get_status': {
          return this.getCombatStatus(args.room_id);
        }
        
        default:
          return `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${args.action}`;
      }
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  }
}
