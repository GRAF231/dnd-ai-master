import { BaseTool, ToolDefinition } from './BaseTool.js';
import { fileStorage } from './utils/FileStorage.js';
import { v4 as uuidv4 } from 'uuid';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
 */
export interface GameNote {
  id: string;
  content: string;
  category: string;
  tags: string[];
  roomId: string;
  authorName: string;
  authorType: 'player' | 'dm' | 'system';
  created: string;
  lastUpdated: string;
  isPrivate: boolean; // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É
}

/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å, –∏—Å–∫–∞—Ç—å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏
 */
export class NotesManagerService implements BaseTool {
  
  getName(): string {
    return 'notes_manager';
  }

  getDescription(): string {
    return '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫';
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
   */
  saveNote(data: {
    content: string;
    category: string;
    roomId: string;
    authorName: string;
    authorType?: 'player' | 'dm' | 'system';
    tags?: string[];
    isPrivate?: boolean;
  }): GameNote {
    const note: GameNote = {
      id: uuidv4(),
      content: data.content,
      category: data.category,
      tags: data.tags || [],
      roomId: data.roomId,
      authorName: data.authorName,
      authorType: data.authorType || 'player',
      created: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
      isPrivate: data.isPrivate || false
    };

    fileStorage.appendToArray(`notes_${data.roomId}`, note);
    return note;
  }

  /**
   * –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   */
  searchNotes(query: string, roomId: string, authorName?: string): GameNote[] {
    const notes = fileStorage.load<GameNote[]>(`notes_${roomId}`) || [];
    const lowerQuery = query.toLowerCase();
    
    return notes.filter(note => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∑–∞–º–µ—Ç–∫–∞–º
      if (note.isPrivate && authorName && note.authorName !== authorName) {
        return false;
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∞–º
      return (
        note.content.toLowerCase().includes(lowerQuery) ||
        note.category.toLowerCase().includes(lowerQuery) ||
        note.tags.some(tag => tag.toLowerCase().includes(lowerQuery))
      );
    }).sort((a, b) => new Date(b.created).getTime() - new Date(a.created).getTime());
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getNotesByCategory(category: string, roomId: string, authorName?: string): GameNote[] {
    const notes = fileStorage.load<GameNote[]>(`notes_${roomId}`) || [];
    
    return notes.filter(note => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∑–∞–º–µ—Ç–∫–∞–º
      if (note.isPrivate && authorName && note.authorName !== authorName) {
        return false;
      }
      
      return note.category.toLowerCase() === category.toLowerCase();
    }).sort((a, b) => new Date(b.created).getTime() - new Date(a.created).getTime());
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
   */
  getAllNotes(roomId: string, authorName?: string): GameNote[] {
    const notes = fileStorage.load<GameNote[]>(`notes_${roomId}`) || [];
    
    return notes.filter(note => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∑–∞–º–µ—Ç–∫–∞–º
      if (note.isPrivate && authorName && note.authorName !== authorName) {
        return false;
      }
      return true;
    }).sort((a, b) => new Date(b.created).getTime() - new Date(a.created).getTime());
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É
   */
  updateNote(noteId: string, roomId: string, updates: Partial<GameNote>, authorName?: string): boolean {
    const notes = fileStorage.load<GameNote[]>(`notes_${roomId}`) || [];
    const noteIndex = notes.findIndex(note => note.id === noteId);
    
    if (noteIndex === -1) return false;
    
    const note = notes[noteIndex];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ DM)
    if (authorName && note.authorName !== authorName && updates.authorType !== 'dm') {
      return false;
    }
    
    notes[noteIndex] = {
      ...note,
      ...updates,
      lastUpdated: new Date().toISOString()
    };
    
    fileStorage.save(`notes_${roomId}`, notes);
    return true;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É
   */
  deleteNote(noteId: string, roomId: string, authorName?: string): boolean {
    const notes = fileStorage.load<GameNote[]>(`notes_${roomId}`) || [];
    const note = notes.find(n => n.id === noteId);
    
    if (!note) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ DM)
    if (authorName && note.authorName !== authorName && note.authorType !== 'dm') {
      return false;
    }
    
    return fileStorage.removeFromArray<GameNote>(
      `notes_${roomId}`,
      n => n.id === noteId
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–º–µ—Ç–æ–∫
   */
  getCategories(roomId: string): string[] {
    const notes = fileStorage.load<GameNote[]>(`notes_${roomId}`) || [];
    const categories = new Set(notes.map(note => note.category));
    return Array.from(categories).sort();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
   */
  getTags(roomId: string): string[] {
    const notes = fileStorage.load<GameNote[]>(`notes_${roomId}`) || [];
    const tags = new Set<string>();
    notes.forEach(note => note.tags.forEach(tag => tags.add(tag)));
    return Array.from(tags).sort();
  }

  validateArgs(args: any): boolean {
    if (args.action === 'save') {
      return !!(args.content && args.category && args.room_id && args.author_name);
    }
    if (args.action === 'search') {
      return !!(args.query && args.room_id);
    }
    if (args.action === 'get_by_category') {
      return !!(args.category && args.room_id);
    }
    if (args.action === 'get_all') {
      return !!args.room_id;
    }
    if (args.action === 'update') {
      return !!(args.note_id && args.room_id && args.updates);
    }
    if (args.action === 'delete') {
      return !!(args.note_id && args.room_id);
    }
    if (args.action === 'get_categories' || args.action === 'get_tags') {
      return !!args.room_id;
    }
    return false;
  }

  getToolDefinition(): ToolDefinition {
    return {
      type: "function",
      function: {
        name: "notes_manager",
        description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏. –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å, –∏—Å–∫–∞—Ç—å, –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∞–º–∏",
        parameters: {
          type: "object",
          properties: {
            action: {
              type: "string",
              enum: ["save", "search", "get_by_category", "get_all", "update", "delete", "get_categories", "get_tags"],
              description: "–î–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏"
            },
            content: {
              type: "string",
              description: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)"
            },
            category: {
              type: "string",
              description: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–º–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏', '–ª–æ–∫–∞—Ü–∏–∏', '–∫–≤–µ—Å—Ç—ã', '—Å—Ä–∞–∂–µ–Ω–∏—è')"
            },
            tags: {
              type: "array",
              items: { type: "string" },
              description: "–¢–µ–≥–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏"
            },
            query: {
              type: "string",
              description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
            },
            note_id: {
              type: "string",
              description: "ID –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è)"
            },
            room_id: {
              type: "string",
              description: "ID –∫–æ–º–Ω–∞—Ç—ã"
            },
            author_name: {
              type: "string",
              description: "–ò–º—è –∞–≤—Ç–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏"
            },
            author_type: {
              type: "string",
              enum: ["player", "dm", "system"],
              description: "–¢–∏–ø –∞–≤—Ç–æ—Ä–∞"
            },
            is_private: {
              type: "boolean",
              description: "–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –ª–∏ –∑–∞–º–µ—Ç–∫–∞ (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É)"
            },
            updates: {
              type: "object",
              description: "–û–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∑–∞–º–µ—Ç–∫–∏"
            }
          },
          required: ["action", "room_id"]
        }
      }
    };
  }

  handleToolCall(args: any): string {
    try {
      switch (args.action) {
        case 'save': {
          const note = this.saveNote({
            content: args.content,
            category: args.category,
            roomId: args.room_id,
            authorName: args.author_name,
            authorType: args.author_type,
            tags: args.tags,
            isPrivate: args.is_private
          });
          
          const privacy = note.isPrivate ? ' üîí (–ø—Ä–∏–≤–∞—Ç–Ω–∞—è)' : '';
          const tagsText = note.tags.length > 0 ? ` | üè∑Ô∏è ${note.tags.join(', ')}` : '';
          
          return `üìù **–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!**${privacy}\n` +
                 `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${note.category}${tagsText}\n` +
                 `üë§ –ê–≤—Ç–æ—Ä: ${note.authorName}\n` +
                 `üÜî ID: ${note.id}`;
        }
        
        case 'search': {
          const notes = this.searchNotes(args.query, args.room_id, args.author_name);
          if (notes.length === 0) {
            return `üîç –ó–∞–º–µ—Ç–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${args.query}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`;
          }
          
          let result = `üîç **–ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: ${notes.length}**\n\n`;
          notes.slice(0, 10).forEach((note, index) => {
            const privacy = note.isPrivate ? ' üîí' : '';
            const preview = note.content.length > 100 ? note.content.substring(0, 100) + '...' : note.content;
            result += `${index + 1}. **${note.category}**${privacy} (${note.authorName})\n`;
            result += `   ${preview}\n\n`;
          });
          
          if (notes.length > 10) {
            result += `... –∏ –µ—â–µ ${notes.length - 10} –∑–∞–º–µ—Ç–æ–∫\n`;
          }
          
          return result;
        }
        
        case 'get_by_category': {
          const notes = this.getNotesByCategory(args.category, args.room_id, args.author_name);
          if (notes.length === 0) {
            return `üìÇ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${args.category}" –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫`;
          }
          
          let result = `üìÇ **–ó–∞–º–µ—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${args.category}": ${notes.length}**\n\n`;
          notes.slice(0, 10).forEach((note, index) => {
            const privacy = note.isPrivate ? ' üîí' : '';
            const preview = note.content.length > 80 ? note.content.substring(0, 80) + '...' : note.content;
            result += `${index + 1}. ${note.authorName}${privacy}: ${preview}\n`;
          });
          
          return result;
        }
        
        case 'get_all': {
          const notes = this.getAllNotes(args.room_id, args.author_name);
          if (notes.length === 0) {
            return `üìã –í –∫–æ–º–Ω–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫`;
          }
          
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
          const categorized: Record<string, GameNote[]> = {};
          notes.forEach(note => {
            if (!categorized[note.category]) {
              categorized[note.category] = [];
            }
            categorized[note.category].push(note);
          });
          
          let result = `üìã **–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ (${notes.length}):**\n\n`;
          Object.entries(categorized).forEach(([category, categoryNotes]) => {
            result += `üìÇ **${category}** (${categoryNotes.length})\n`;
            categoryNotes.slice(0, 3).forEach(note => {
              const privacy = note.isPrivate ? ' üîí' : '';
              const preview = note.content.length > 50 ? note.content.substring(0, 50) + '...' : note.content;
              result += `   ‚Ä¢ ${note.authorName}${privacy}: ${preview}\n`;
            });
            if (categoryNotes.length > 3) {
              result += `   ... –∏ –µ—â–µ ${categoryNotes.length - 3}\n`;
            }
            result += '\n';
          });
          
          return result;
        }
        
        case 'update': {
          const success = this.updateNote(args.note_id, args.room_id, args.updates, args.author_name);
          if (!success) {
            return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É —Å ID ${args.note_id}`;
          }
          return `‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`;
        }
        
        case 'delete': {
          const success = this.deleteNote(args.note_id, args.room_id, args.author_name);
          if (!success) {
            return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É —Å ID ${args.note_id}`;
          }
          return `‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`;
        }
        
        case 'get_categories': {
          const categories = this.getCategories(args.room_id);
          if (categories.length === 0) {
            return `üìÇ –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–º–µ—Ç–æ–∫`;
          }
          return `üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–æ–∫:** ${categories.join(', ')}`;
        }
        
        case 'get_tags': {
          const tags = this.getTags(args.room_id);
          if (tags.length === 0) {
            return `üè∑Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤`;
          }
          return `üè∑Ô∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:** ${tags.join(', ')}`;
        }
        
        default:
          return `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${args.action}`;
      }
    } catch (error) {
      return `‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    }
  }
}
