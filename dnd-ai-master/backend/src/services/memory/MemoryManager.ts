import { DatabaseService } from './DatabaseService.js';
import { EntityService } from './EntityService.js';
import { ContextManager } from './ContextManager.js';
import { SummaryService } from './SummaryService.js';
import { 
  Room, Session, Message, Entity, Fact, GameContext,
  CreateRoomRequest, CreateSessionRequest, SaveMessageRequest,
  CreateEntityRequest, CreateFactRequest, ContextOptions,
  OperationResult, MemoryStats, EntityType,
  OptimizedContext, ContextManagerConfig, SummaryServiceConfig,
  CreateSummaryRequest, Summary, CompressionStats
} from './types.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞—Å–∞–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ AI D&D Master
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞–º—è—Ç—å—é
 */
export class MemoryManager {
  private db: DatabaseService;
  private entityService: EntityService;
  private contextManager: ContextManager;
  private summaryService: SummaryService;
  private initialized: boolean = false;

  constructor(
    dbPath?: string,
    contextConfig?: Partial<ContextManagerConfig>,
    summaryConfig?: Partial<SummaryServiceConfig>
  ) {
    this.db = new DatabaseService(dbPath);
    this.entityService = new EntityService(this.db);
    this.contextManager = new ContextManager(this.db, this.entityService, contextConfig);
    this.summaryService = new SummaryService(this.db, this.entityService, summaryConfig);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
   */
  async initialize(): Promise<void> {
    if (this.initialized) return;
    
    await this.db.initialize();
    this.initialized = true;
    console.log('üß† MemoryManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
   */
  async close(): Promise<void> {
    if (!this.initialized) return;
    
    await this.db.close();
    this.initialized = false;
    console.log('üß† MemoryManager –∑–∞–∫—Ä—ã—Ç');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  private ensureInitialized(): void {
    if (!this.initialized) {
      throw new Error('MemoryManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
    }
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ù–ê–¢–ê–ú–ò ===

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
   */
  async createRoom(request: CreateRoomRequest): Promise<OperationResult<Room>> {
    this.ensureInitialized();
    return this.db.createRoom(request);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
   */
  async getRoom(roomId: string): Promise<Room | undefined> {
    this.ensureInitialized();
    return this.db.getRoomById(roomId);
  }

  /**
   * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã (—Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
   */
  async ensureRoom(roomId: string, title?: string): Promise<Room> {
    this.ensureInitialized();
    
    let room = await this.db.getRoomById(roomId);
    
    if (!room) {
      const createResult = await this.db.createRoom({
        id: roomId,
        title: title || `–ö–æ–º–Ω–∞—Ç–∞ ${roomId}`,
        settings: {}
      });
      
      if (!createResult.success || !createResult.data) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: ${createResult.error}`);
      }
      
      room = createResult.data;
      console.log(`üè† –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: ${roomId}`);
    }
    
    return room;
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò ===

  /**
   * –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π
   */
  async startSession(roomId: string): Promise<Session> {
    this.ensureInitialized();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    let session = await this.db.getActiveSession(roomId);
    
    if (!session) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const createResult = await this.db.createSession({ room_id: roomId });
      
      if (!createResult.success || !createResult.data) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é: ${createResult.error}`);
      }
      
      session = createResult.data;
      console.log(`üéÆ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ${session.id} –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
    }
    
    return session;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  async endSession(sessionId: string, summary?: string): Promise<OperationResult<void>> {
    this.ensureInitialized();
    
    const result = await this.db.endSession(sessionId, summary);
    
    if (result.success) {
      console.log(`üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${sessionId}`);
    }
    
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
   */
  async getActiveSession(roomId: string): Promise<Session | undefined> {
    this.ensureInitialized();
    return this.db.getActiveSession(roomId);
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò ===

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async saveMessage(request: SaveMessageRequest): Promise<OperationResult<Message>> {
    this.ensureInitialized();
    
    const result = await this.db.saveMessage(request);
    
    if (result.success) {
      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${request.role} - ${request.content.substring(0, 50)}...`);
    }
    
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏
   */
  async getRecentMessages(sessionId: string, limit: number = 50): Promise<Message[]> {
    this.ensureInitialized();
    return this.db.getRecentMessages(sessionId, limit);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async saveUserMessage(sessionId: string, content: string, playerName?: string): Promise<OperationResult<Message>> {
    return this.saveMessage({
      session_id: sessionId,
      role: 'user',
      content,
      player_name: playerName
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞
   */
  async saveAssistantMessage(sessionId: string, content: string, tokenCount?: number): Promise<OperationResult<Message>> {
    return this.saveMessage({
      session_id: sessionId,
      role: 'assistant',
      content,
      token_count: tokenCount
    });
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–£–©–ù–û–°–¢–Ø–ú–ò ===

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  async createEntity(request: CreateEntityRequest): Promise<OperationResult<Entity>> {
    this.ensureInitialized();
    
    const result = await this.db.createEntity(request);
    
    if (result.success) {
      console.log(`üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å: ${request.type} - ${request.name}`);
    }
    
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ ID
   */
  async getEntity(entityId: string): Promise<Entity | undefined> {
    this.ensureInitialized();
    return this.db.getEntityById(entityId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∫–æ–º–Ω–∞—Ç—ã
   */
  async getEntities(roomId: string, type?: EntityType): Promise<Entity[]> {
    this.ensureInitialized();
    return this.db.getEntitiesByRoom(roomId, type);
  }

  /**
   * –ü–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ –∏–º–µ–Ω–∏
   */
  async findEntitiesByName(roomId: string, name: string, type?: EntityType): Promise<Entity[]> {
    this.ensureInitialized();
    
    const entities = await this.db.getEntitiesByRoom(roomId, type);
    
    return entities.filter(entity => 
      entity.name.toLowerCase().includes(name.toLowerCase())
    );
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ö–¢–ê–ú–ò ===

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–∫—Ç–∞
   */
  async createFact(request: CreateFactRequest): Promise<OperationResult<Fact>> {
    this.ensureInitialized();
    
    const result = await this.db.createFact(request);
    
    if (result.success) {
      console.log(`üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–∫—Ç: ${request.key} = ${request.value}`);
    }
    
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  async getEntityFacts(entityId: string): Promise<Fact[]> {
    this.ensureInitialized();
    return this.entityService.getEntityFacts(entityId);
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  async extractEntitiesFromText(roomId: string, text: string, sourceMessageId?: string): Promise<Entity[]> {
    this.ensureInitialized();
    return this.entityService.extractEntitiesFromText(roomId, text, sourceMessageId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
   */
  async getRelatedEntities(entityId: string, roomId: string): Promise<Entity[]> {
    this.ensureInitialized();
    return this.entityService.getRelatedEntities(entityId, roomId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
   */
  async getEntityStats(roomId: string): Promise<{
    total: number;
    by_type: Record<EntityType, number>;
    with_facts: number;
    recent_entities: Entity[];
  }> {
    this.ensureInitialized();
    return this.entityService.getEntityStats(roomId);
  }

  // === –ü–û–°–¢–†–û–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê ===

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ò–ò-–º–∞—Å—Ç–µ—Ä–∞
   */
  async buildContext(roomId: string, options: ContextOptions = {}): Promise<GameContext> {
    this.ensureInitialized();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const opts = {
      max_messages: options.max_messages || 30,
      max_tokens: options.max_tokens || 150000, // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      include_entities: options.include_entities !== false,
      include_facts: options.include_facts !== false,
      entity_types: options.entity_types
    };

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    const session = await this.getActiveSession(roomId);
    
    if (!session) {
      throw new Error(`–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const recent_messages = await this.getRecentMessages(session.id, opts.max_messages);

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    let active_entities: Entity[] = [];
    if (opts.include_entities) {
      active_entities = await this.getEntities(roomId);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (opts.entity_types && opts.entity_types.length > 0) {
        active_entities = active_entities.filter(entity => 
          opts.entity_types!.includes(entity.type)
        );
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã
    let relevant_facts: Fact[] = [];
    if (opts.include_facts && active_entities.length > 0) {
      const factPromises = active_entities.map(entity => 
        this.getEntityFacts(entity.id)
      );
      
      const allFacts = await Promise.all(factPromises);
      relevant_facts = allFacts.flat();
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    const total_tokens = this.estimateTokens(recent_messages, active_entities, relevant_facts);

    const context: GameContext = {
      session_id: session.id,
      room_id: roomId,
      recent_messages,
      active_entities,
      relevant_facts,
      session_summary: session.summary,
      total_tokens
    };

    console.log(`üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${recent_messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, ${active_entities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π, ${relevant_facts.length} —Ñ–∞–∫—Ç–æ–≤, ~${total_tokens} —Ç–æ–∫–µ–Ω–æ–≤`);

    return context;
  }

  /**
   * –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
   */
  private estimateTokens(messages: Message[], entities: Entity[], facts: Fact[]): number {
    let tokens = 0;
    
    // –°–æ–æ–±—â–µ–Ω–∏—è: ~4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    tokens += messages.reduce((sum, msg) => sum + Math.ceil(msg.content.length / 4), 0);
    
    // –°—É—â–Ω–æ—Å—Ç–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ + –æ–ø–∏—Å–∞–Ω–∏–µ
    tokens += entities.reduce((sum, entity) => {
      const content = entity.name + (entity.description || '') + JSON.stringify(entity.data);
      return sum + Math.ceil(content.length / 4);
    }, 0);
    
    // –§–∞–∫—Ç—ã: –∫–ª—é—á + –∑–Ω–∞—á–µ–Ω–∏–µ
    tokens += facts.reduce((sum, fact) => {
      return sum + Math.ceil((fact.key + fact.value).length / 4);
    }, 0);
    
    return tokens;
  }

  // === –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–ï –û–ü–ï–†–ê–¶–ò–ò ===

  /**
   * –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async processUserMessage(roomId: string, content: string, playerName?: string): Promise<{
    session: Session;
    message: Message;
    context: GameContext;
  }> {
    this.ensureInitialized();
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    await this.ensureRoom(roomId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await this.startSession(roomId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const messageResult = await this.saveUserMessage(session.id, content, playerName);
    
    if (!messageResult.success || !messageResult.data) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageResult.error}`);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const extractedEntities = await this.extractEntitiesFromText(roomId, content, messageResult.data.id);
      if (extractedEntities.length > 0) {
        console.log(`üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${extractedEntities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
    
    // –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const context = await this.buildContext(roomId);
    
    return {
      session,
      message: messageResult.data,
      context
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞
   */
  async processAssistantResponse(sessionId: string, content: string, tokenCount?: number): Promise<Message> {
    this.ensureInitialized();
    
    const messageResult = await this.saveAssistantMessage(sessionId, content, tokenCount);
    
    if (!messageResult.success || !messageResult.data) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò: ${messageResult.error}`);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞
    try {
      const session = await this.db.getSessionById(sessionId);
      if (session) {
        const extractedEntities = await this.extractEntitiesFromText(session.room_id, content, messageResult.data.id);
        if (extractedEntities.length > 0) {
          console.log(`üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${extractedEntities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞`);
        }
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞:', error);
    }
    
    return messageResult.data;
  }

  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –£–¢–ò–õ–ò–¢–´ ===

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
   */
  async getStats(): Promise<MemoryStats> {
    this.ensureInitialized();
    
    const dbStats = await this.db.getStats();
    
    return {
      total_sessions: dbStats.total_sessions,
      total_messages: dbStats.total_messages,
      total_entities: dbStats.total_entities,
      total_facts: dbStats.total_facts,
      compressed_messages: dbStats.compressed_messages,
      average_session_length: dbStats.total_messages > 0 ? 
        Math.round(dbStats.total_messages / Math.max(dbStats.total_sessions, 1)) : 0,
      storage_size_mb: 0 // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ë–î
    };
  }

  // === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø CONTEXTMANAGER ===

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π
   */
  async buildOptimizedContext(
    roomId: string,
    options?: ContextOptions
  ): Promise<OptimizedContext> {
    this.ensureInitialized();
    return this.contextManager.buildOptimizedContext(roomId, options);
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
   */
  invalidateContextCache(roomId: string): void {
    this.contextManager.invalidateRoomCache(roomId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  getContextCacheStats(): {
    total_entries: number;
    active_entries: number;
    expired_entries: number;
    memory_usage_mb: number;
  } {
    return this.contextManager.getCacheStats();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  clearContextCache(): void {
    this.contextManager.clearCache();
  }

  // === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø SUMMARYSERVICE ===

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async createSummary(request: CreateSummaryRequest): Promise<OperationResult<Summary>> {
    this.ensureInitialized();
    return this.summaryService.createSummary(request);
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏
   */
  async checkAutoSummary(sessionId: string): Promise<void> {
    this.ensureInitialized();
    await this.summaryService.checkAndCreateAutoSummary(sessionId);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
   */
  async detectScenes(sessionId: string) {
    this.ensureInitialized();
    return this.summaryService.detectScenes(sessionId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∂–∞—Ç–∏—è
   */
  async getCompressionStats(sessionId: string): Promise<CompressionStats> {
    this.ensureInitialized();
    return this.summaryService.getCompressionStats(sessionId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–¥–æ–∫
   */
  getSummaryProcessingStatus(): {
    active_sessions: string[];
    queue_size: number;
  } {
    return this.summaryService.getProcessingStatus();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–¥–æ–∫
   */
  clearSummaryProcessingQueue(): void {
    this.summaryService.clearProcessingQueue();
  }

  // === –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô ===

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
   */
  async processUserMessageWithOptimizations(roomId: string, content: string, playerName?: string): Promise<{
    session: Session;
    message: Message;
    context: OptimizedContext;
  }> {
    this.ensureInitialized();
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    await this.ensureRoom(roomId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await this.startSession(roomId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const messageResult = await this.saveUserMessage(session.id, content, playerName);
    
    if (!messageResult.success || !messageResult.data) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageResult.error}`);
    }

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    this.invalidateContextCache(roomId);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const extractedEntities = await this.extractEntitiesFromText(roomId, content, messageResult.data.id);
      if (extractedEntities.length > 0) {
        console.log(`üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${extractedEntities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
    
    // –°—Ç—Ä–æ–∏–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const context = await this.buildOptimizedContext(roomId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏
    try {
      await this.checkAutoSummary(session.id);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏:', error);
    }
    
    return {
      session,
      message: messageResult.data,
      context
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
   */
  async processAssistantResponseWithOptimizations(sessionId: string, content: string, tokenCount?: number): Promise<Message> {
    this.ensureInitialized();
    
    const messageResult = await this.saveAssistantMessage(sessionId, content, tokenCount);
    
    if (!messageResult.success || !messageResult.data) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò: ${messageResult.error}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º roomId –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
    const session = await this.db.getSessionById(sessionId);
    if (session) {
      this.invalidateContextCache(session.room_id);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞
    try {
      if (session) {
        const extractedEntities = await this.extractEntitiesFromText(session.room_id, content, messageResult.data.id);
        if (extractedEntities.length > 0) {
          console.log(`üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${extractedEntities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞`);
        }
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞:', error);
    }
    
    return messageResult.data;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
   */
  async test(): Promise<void> {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MemoryManager...');
    
    try {
      // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
      const roomResult = await this.createRoom({
        id: 'test_room',
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞',
        settings: { test: true }
      });
      
      console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', roomResult.success);
      
      // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
      const session = await this.startSession('test_room');
      console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', session.id);
      
      // –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageResult = await this.saveUserMessage(
        session.id, 
        '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 
        '–¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫'
      );
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', messageResult.success);
      
      // –¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const context = await this.buildContext('test_room');
      console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:', context.recent_messages.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
      
      // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const stats = await this.getStats();
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats);
      
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }
}
