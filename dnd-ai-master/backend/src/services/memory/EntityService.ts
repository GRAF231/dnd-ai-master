import { DatabaseService } from './DatabaseService.js';
import { 
  Entity, Fact, EntityType, 
  CreateEntityRequest, CreateFactRequest, 
  OperationResult 
} from './types.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
 */
export class EntityService {
  private db: DatabaseService;

  constructor(db: DatabaseService) {
    this.db = db;
  }

  // === CRUD –û–ü–ï–†–ê–¶–ò–ò ===

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  async createEntity(request: CreateEntityRequest): Promise<OperationResult<Entity>> {
    return this.db.createEntity(request);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ ID
   */
  async getEntity(entityId: string): Promise<Entity | undefined> {
    return this.db.getEntityById(entityId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∫–æ–º–Ω–∞—Ç—ã
   */
  async getEntitiesByRoom(roomId: string, type?: EntityType): Promise<Entity[]> {
    return this.db.getEntitiesByRoom(roomId, type);
  }

  /**
   * –ü–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ –∏–º–µ–Ω–∏
   */
  async findEntitiesByName(roomId: string, name: string, type?: EntityType): Promise<Entity[]> {
    const entities = await this.db.getEntitiesByRoom(roomId, type);
    
    return entities.filter(entity => 
      entity.name.toLowerCase().includes(name.toLowerCase())
    );
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  async updateEntity(entityId: string, updates: Partial<Entity>): Promise<OperationResult<Entity>> {
    try {
      const entity = await this.db.getEntityById(entityId);
      if (!entity) {
        return { success: false, error: '–°—É—â–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
      const updatedEntity = {
        ...entity,
        ...updates,
        id: entity.id, // ID –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
        updated_at: new Date()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ update –≤ DatabaseService)
      // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      return { success: true, data: updatedEntity };
    } catch (error) {
      return { 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏: ${error instanceof Error ? error.message : error}` 
      };
    }
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ö–¢–ê–ú–ò ===

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ –∫ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  async addFact(request: CreateFactRequest): Promise<OperationResult<Fact>> {
    return this.db.createFact(request);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  async getEntityFacts(entityId: string): Promise<Fact[]> {
    return this.db.getFactsByEntity(entityId);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
   */
  async updateFact(entityId: string, key: string, newValue: string, confidence?: number): Promise<OperationResult<Fact>> {
    try {
      const facts = await this.db.getFactsByEntity(entityId);
      const existingFact = facts.find(f => f.key === key);

      if (existingFact) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–∫—Ç
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ updateFact –≤ DatabaseService
        // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        return this.db.createFact({
          entity_id: entityId,
          key,
          value: newValue,
          confidence: confidence || Math.min(1.0, (existingFact.confidence || 0.5) + 0.1)
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç
        return this.db.createFact({
          entity_id: entityId,
          key,
          value: newValue,
          confidence: confidence || 0.8
        });
      }
    } catch (error) {
      return { 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞: ${error instanceof Error ? error.message : error}` 
      };
    }
  }

  // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô ===

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async extractEntitiesFromText(roomId: string, text: string, sourceMessageId?: string): Promise<Entity[]> {
    const extractedEntities: Entity[] = [];

    try {
      // 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ + —Ä–æ–ª–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã)
      const characterMatches = this.extractCharacters(text);
      for (const match of characterMatches) {
        const entity = await this.findOrCreateEntity(roomId, 'character', match.name, match.description);
        if (entity) {
          extractedEntities.push(entity);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
          if (match.attributes.length > 0) {
            for (const attr of match.attributes) {
              await this.addFact({
                entity_id: entity.id,
                key: attr.key,
                value: attr.value,
                confidence: 0.7,
                source_message_id: sourceMessageId
              });
            }
          }
        }
      }

      // 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
      const locationMatches = this.extractLocations(text);
      for (const match of locationMatches) {
        const entity = await this.findOrCreateEntity(roomId, 'location', match.name, match.description);
        if (entity) {
          extractedEntities.push(entity);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã –æ –ª–æ–∫–∞—Ü–∏–∏
          if (match.attributes.length > 0) {
            for (const attr of match.attributes) {
              await this.addFact({
                entity_id: entity.id,
                key: attr.key,
                value: attr.value,
                confidence: 0.7,
                source_message_id: sourceMessageId
              });
            }
          }
        }
      }

      // 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      const itemMatches = this.extractItems(text);
      for (const match of itemMatches) {
        const entity = await this.findOrCreateEntity(roomId, 'item', match.name, match.description);
        if (entity) {
          extractedEntities.push(entity);
        }
      }

      // 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ NPC
      const npcMatches = this.extractNPCs(text);
      for (const match of npcMatches) {
        const entity = await this.findOrCreateEntity(roomId, 'npc', match.name, match.description);
        if (entity) {
          extractedEntities.push(entity);
        }
      }

      console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ ${extractedEntities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞`);
      return extractedEntities;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π:', error);
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  private async findOrCreateEntity(
    roomId: string, 
    type: EntityType, 
    name: string, 
    description?: string
  ): Promise<Entity | null> {
    try {
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—É—â–Ω–æ—Å—Ç—å
      const existing = await this.findEntitiesByName(roomId, name, type);
      if (existing.length > 0) {
        return existing[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å
      const result = await this.createEntity({
        room_id: roomId,
        type,
        name,
        description,
        data: {}
      });

      return result.success ? result.data || null : null;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ ${type}:${name}:`, error);
      return null;
    }
  }

  // === –ü–ê–¢–¢–ï–†–ù–´ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø ===

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractCharacters(text: string): Array<{
    name: string;
    description?: string;
    attributes: Array<{key: string, value: string}>;
  }> {
    const characters: Array<{
      name: string;
      description?: string;
      attributes: Array<{key: string, value: string}>;
    }> = [];

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const patterns = [
      // "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞"
      /(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|—è\s+(?:–µ—Å—Ç—å|—ç—Ç–æ)?)\s+([–ê-–Ø–Å][–∞-—è—ë]+)/gi,
      // "–ø–µ—Ä—Å–æ–Ω–∞–∂ –ê–ª–∏—Å–∞"
      /–ø–µ—Ä—Å–æ–Ω–∞–∂[–∞-—è\s]*([–ê-–Ø–Å][–∞-—è—ë]+)/gi,
      // "–ê–ª–∏—Å–∞ - —ç–ª—å—Ñ"
      /([–ê-–Ø–Å][–∞-—è—ë]+)\s*[-‚Äì‚Äî]\s*([–∞-—è—ë\-]+)/gi,
      // "—ç–ª—å—Ñ –ø–æ –∏–º–µ–Ω–∏ –ê–ª–∏—Å–∞"
      /([–∞-—è—ë\-]+)\s+–ø–æ –∏–º–µ–Ω–∏\s+([–ê-–Ø–Å][–∞-—è—ë]+)/gi
    ];

    for (const pattern of patterns) {
      let match;
      while ((match = pattern.exec(text)) !== null) {
        const name = match[1] || match[2];
        if (name && name.length > 1) {
          const attributes: Array<{key: string, value: string}> = [];
          
          // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
          if (match[2] && match[1] !== match[2]) {
            attributes.push({ key: '—Ç–∏–ø', value: match[2] });
          }

          // –ò—â–µ–º —Ä–∞—Å—É/–∫–ª–∞—Å—Å –≤ –æ–∫—Ä—É–∂–∞—é—â–µ–º —Ç–µ–∫—Å—Ç–µ
          const raceMatch = text.match(new RegExp(`${name}[^.]*?(—ç–ª—å—Ñ|—á–µ–ª–æ–≤–µ–∫|–¥–≤–∞—Ä—Ñ|–ø–æ–ª—É—Ä–æ—Å–ª–∏–∫|–¥—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π|—Ç–∏—Ñ–ª–∏–Ω–≥|–≥–Ω–æ–º)`, 'i'));
          if (raceMatch) {
            attributes.push({ key: '—Ä–∞—Å–∞', value: raceMatch[1] });
          }

          const classMatch = text.match(new RegExp(`${name}[^.]*?(–≤–æ–∏–Ω|–º–∞–≥|—Å–ª–µ–¥–æ–ø—ã—Ç|–ø–ª—É—Ç|–∫–ª–µ—Ä–∏–∫|–≤–∞—Ä–≤–∞—Ä|–±–∞—Ä–¥|—á–∞—Ä–æ–¥–µ–π|–∫–æ–ª–¥—É–Ω|–ø–∞–ª–∞–¥–∏–Ω|–¥—Ä—É–∏–¥|–º–æ–Ω–∞—Ö)`, 'i'));
          if (classMatch) {
            attributes.push({ key: '–∫–ª–∞—Å—Å', value: classMatch[1] });
          }

          characters.push({
            name: name.trim(),
            description: `–ü–µ—Ä—Å–æ–Ω–∞–∂ ${name}`,
            attributes
          });
        }
      }
    }

    return characters;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractLocations(text: string): Array<{
    name: string;
    description?: string;
    attributes: Array<{key: string, value: string}>;
  }> {
    const locations: Array<{
      name: string;
      description?: string;
      attributes: Array<{key: string, value: string}>;
    }> = [];

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π
    const patterns = [
      // "–≤ —Ç–∞–≤–µ—Ä–Ω–µ", "–≤ –ª–µ—Å—É"
      /–≤\s+(—Ç–∞–≤–µ—Ä–Ω–µ?|–ª–µ—Å—É|–≥–æ—Ä–æ–¥–µ?|–∑–∞–º–∫–µ?|–±–∞—à–Ω–µ?|–ø–µ—â–µ—Ä–µ?|—Ö—Ä–∞–º–µ?|–¥–æ–º–µ?|–∫–æ–º–Ω–∞—Ç–µ?|–∑–∞–ª–µ?)[^–∞-—è—ë]*([–ê-–Ø–Å][–∞-—è—ë\s]*)?/gi,
      // "—Ç–∞–≤–µ—Ä–Ω–∞ –ó–æ–ª–æ—Ç–æ–π –¥—Ä–∞–∫–æ–Ω"
      /(—Ç–∞–≤–µ—Ä–Ω–∞|–ª–µ—Å|–≥–æ—Ä–æ–¥|–∑–∞–º–æ–∫|–±–∞—à–Ω—è|–ø–µ—â–µ—Ä–∞|—Ö—Ä–∞–º|–¥–æ–º)\s+[¬´"']?([–ê-–Ø–Å][–∞-—è—ë\s]+)[¬´"']?/gi,
      // "–ó–æ–ª–æ—Ç–æ–π –¥—Ä–∞–∫–æ–Ω" (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)
      /[¬´"']([–ê-–Ø–Å][–∞-—è—ë\s]{2,})[¬´"']/gi
    ];

    for (const pattern of patterns) {
      let match;
      while ((match = pattern.exec(text)) !== null) {
        const locationType = match[1]?.toLowerCase();
        const locationName = match[2] || match[1];
        
        if (locationName && locationName.length > 2) {
          const attributes: Array<{key: string, value: string}> = [];
          
          if (locationType && locationType !== locationName.toLowerCase()) {
            attributes.push({ key: '—Ç–∏–ø', value: locationType });
          }

          // –ò—â–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          const atmosphereMatch = text.match(/(—É—é—Ç–Ω|—Ç–µ–º–Ω|—Å–≤–µ—Ç–ª|–º—Ä–∞—á–Ω|—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω|–¥—Ä–µ–≤–Ω)/i);
          if (atmosphereMatch) {
            attributes.push({ key: '–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞', value: atmosphereMatch[1] + '—ã–π' });
          }

          locations.push({
            name: locationName.trim(),
            description: `–õ–æ–∫–∞—Ü–∏—è: ${locationName}`,
            attributes
          });
        }
      }
    }

    return locations;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractItems(text: string): Array<{
    name: string;
    description?: string;
  }> {
    const items: Array<{
      name: string;
      description?: string;
    }> = [];

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const patterns = [
      // "–º–µ—á", "—â–∏—Ç", "–∑–µ–ª—å–µ"
      /(–º–µ—á|—â–∏—Ç|–ª—É–∫|—Å—Ç—Ä–µ–ª–∞|–∑–µ–ª—å–µ|—Å–≤–∏—Ç–æ–∫|–∫–æ–ª—å—Ü–æ|–∞–º—É–ª–µ—Ç|–ø–æ—Å–æ—Ö|–∂–µ–∑–ª|–¥–æ—Å–ø–µ—Ö|—à–ª–µ–º|—Å–∞–ø–æ–≥–∏|–ø–ª–∞—â|–∫–∏–Ω–∂–∞–ª|—Ç–æ–ø–æ—Ä|–º–æ–ª–æ—Ç)[–∞-—è—ë]*/gi,
      // "–≤–æ–ª—à–µ–±–Ω—ã–π –º–µ—á"
      /(–≤–æ–ª—à–µ–±–Ω[–∞-—è—ë]*|–º–∞–≥–∏—á–µ—Å–∫[–∞-—è—ë]*|–¥—Ä–µ–≤–Ω[–∞-—è—ë]*|–∑–æ–ª–æ—Ç[–∞-—è—ë]*|—Å–µ—Ä–µ–±—Ä—è–Ω[–∞-—è—ë]*)\s+(–º–µ—á|—â–∏—Ç|–ª—É–∫|–∑–µ–ª—å–µ|—Å–≤–∏—Ç–æ–∫|–∫–æ–ª—å—Ü–æ|–∞–º—É–ª–µ—Ç|–ø–æ—Å–æ—Ö|–∂–µ–∑–ª)[–∞-—è—ë]*/gi
    ];

    for (const pattern of patterns) {
      let match;
      while ((match = pattern.exec(text)) !== null) {
        const itemName = match[0].trim();
        if (itemName.length > 2) {
          items.push({
            name: itemName,
            description: `–ü—Ä–µ–¥–º–µ—Ç: ${itemName}`
          });
        }
      }
    }

    return items;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ NPC –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractNPCs(text: string): Array<{
    name: string;
    description?: string;
  }> {
    const npcs: Array<{
      name: string;
      description?: string;
    }> = [];

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ NPC
    const patterns = [
      // "—Ç—Ä–∞–∫—Ç–∏—Ä—â–∏–∫ –ë–æ—Ä–∏—Å"
      /(—Ç—Ä–∞–∫—Ç–∏—Ä—â–∏–∫|—Ç–æ—Ä–≥–æ–≤–µ—Ü|—Å—Ç—Ä–∞–∂–Ω–∏–∫|–º–∞–≥|–∂—Ä–µ—Ü|–∫—É–∑–Ω–µ—Ü|–±–∞—Ä–º–µ–Ω|—Å—Ç–∞—Ä–∏–∫|—Å—Ç–∞—Ä—É—Ö–∞|–¥–µ–≤–æ—á–∫–∞|–º–∞–ª—å—á–∏–∫|–∂–µ–Ω—â–∏–Ω–∞|–º—É–∂—á–∏–Ω–∞)\s+([–ê-–Ø–Å][–∞-—è—ë]+)/gi,
      // "–ë–æ—Ä–∏—Å - —Ç—Ä–∞–∫—Ç–∏—Ä—â–∏–∫"
      /([–ê-–Ø–Å][–∞-—è—ë]+)\s*[-‚Äì‚Äî]\s*(—Ç—Ä–∞–∫—Ç–∏—Ä—â–∏–∫|—Ç–æ—Ä–≥–æ–≤–µ—Ü|—Å—Ç—Ä–∞–∂–Ω–∏–∫|–º–∞–≥|–∂—Ä–µ—Ü|–∫—É–∑–Ω–µ—Ü|–±–∞—Ä–º–µ–Ω)/gi
    ];

    for (const pattern of patterns) {
      let match;
      while ((match = pattern.exec(text)) !== null) {
        const name = match[2] || match[1];
        const role = match[1] || match[2];
        
        if (name && name.length > 1 && name !== role) {
          npcs.push({
            name: name.trim(),
            description: `${role}: ${name}`
          });
        }
      }
    }

    return npcs;
  }

  // === –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ===

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
   */
  async getRelatedEntities(entityId: string, roomId: string): Promise<Entity[]> {
    try {
      const entity = await this.getEntity(entityId);
      if (!entity) return [];

      const allEntities = await this.getEntitiesByRoom(roomId);
      const related: Entity[] = [];

      // –ò—â–µ–º —Å—É—â–Ω–æ—Å—Ç–∏, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ —Ñ–∞–∫—Ç–∞—Ö —Ç–µ–∫—É—â–µ–π —Å—É—â–Ω–æ—Å—Ç–∏
      const facts = await this.getEntityFacts(entityId);
      
      for (const fact of facts) {
        for (const otherEntity of allEntities) {
          if (otherEntity.id !== entityId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –¥—Ä—É–≥–∞—è —Å—É—â–Ω–æ—Å—Ç—å –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞
            if (fact.value.toLowerCase().includes(otherEntity.name.toLowerCase())) {
              related.push(otherEntity);
            }
          }
        }
      }

      return related;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
   */
  async getEntityStats(roomId: string): Promise<{
    total: number;
    by_type: Record<EntityType, number>;
    with_facts: number;
    recent_entities: Entity[];
  }> {
    try {
      const entities = await this.getEntitiesByRoom(roomId);
      
      const stats = {
        total: entities.length,
        by_type: {
          character: 0,
          location: 0,
          quest: 0,
          npc: 0,
          item: 0
        } as Record<EntityType, number>,
        with_facts: 0,
        recent_entities: entities.slice(-5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—É—â–Ω–æ—Å—Ç–µ–π
      };

      for (const entity of entities) {
        stats.by_type[entity.type]++;
        
        const facts = await this.getEntityFacts(entity.id);
        if (facts.length > 0) {
          stats.with_facts++;
        }
      }

      return stats;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π:', error);
      return {
        total: 0,
        by_type: { character: 0, location: 0, quest: 0, npc: 0, item: 0 },
        with_facts: 0,
        recent_entities: []
      };
    }
  }
}
