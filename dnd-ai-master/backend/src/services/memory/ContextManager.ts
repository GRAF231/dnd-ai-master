import { DatabaseService } from './DatabaseService.js';
import { EntityService } from './EntityService.js';
import {
  Message, Entity, GameContext, ContextOptions,
  ContextManagerConfig, PrioritizedMessage, PrioritizedEntity,
  OptimizedContext, CachedContext, EntityType
} from './types.js';

/**
 * ContextManager - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ò–ò-–º–∞—Å—Ç–µ—Ä–∞
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω-–±—é–¥–∂–µ—Ç–æ–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 150k —Ç–æ–∫–µ–Ω–æ–≤)
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
 */
export class ContextManager {
  private db: DatabaseService;
  private entityService: EntityService;
  private config: ContextManagerConfig;
  private contextCache: Map<string, CachedContext> = new Map();

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly DEFAULT_CONFIG: ContextManagerConfig = {
    max_tokens: 150000,        // 150k —Ç–æ–∫–µ–Ω–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ Claude)
    max_messages: 100,         // –ú–∞–∫—Å–∏–º—É–º 100 —Å–æ–æ–±—â–µ–Ω–∏–π
    priority_threshold: 0.3,   // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    cache_ttl_ms: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç –∫—ç—à
  };

  // –í–µ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  private static readonly MESSAGE_WEIGHTS = {
    time_decay_factor: 0.1,    // –§–∞–∫—Ç–æ—Ä –∑–∞—Ç—É—Ö–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    user_message_boost: 1.2,   // –ë–æ–Ω—É—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    entity_mention_boost: 1.5, // –ë–æ–Ω—É—Å –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
    keyword_boost: 1.3,        // –ë–æ–Ω—É—Å –∑–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    recent_boost: 2.0          // –ë–æ–Ω—É—Å –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
  };

  // –í–µ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π
  private static readonly ENTITY_WEIGHTS = {
    frequency_factor: 0.4,     // –í–µ—Å —á–∞—Å—Ç–æ—Ç—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    recency_factor: 0.3,       // –í–µ—Å –Ω–µ–¥–∞–≤–Ω–æ—Å—Ç–∏
    connection_factor: 0.3     // –í–µ—Å —Å–≤—è–∑–µ–π —Å –¥—Ä—É–≥–∏–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
  };

  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ D&D –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  private static readonly DND_KEYWORDS = [
    '–∞—Ç–∞–∫–∞', '–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ', '–±—Ä–æ—Å–æ–∫', '—É—Ä–æ–Ω', '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞', '–ø—Ä–æ–≤–µ—Ä–∫–∞',
    '—Å–ø–∞—Å–±—Ä–æ—Å–æ–∫', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π', '–ø—Ä–æ–º–∞—Ö', '–ø–æ–ø–∞–¥–∞–Ω–∏–µ', '–ª–µ—á–µ–Ω–∏–µ',
    '–º–∞–≥–∏—è', '–∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å', '–≤–æ–∏–Ω', '–ø–ª—É—Ç', '–∫–ª–µ—Ä–∏–∫', '–≤–æ–ª—à–µ–±–Ω–∏–∫',
    '–¥—Ä–∞–∫–æ–Ω', '–ø–æ–¥–∑–µ–º–µ–ª—å–µ', '—Å–æ–∫—Ä–æ–≤–∏—â–µ', '–∫–≤–µ—Å—Ç', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
    '–±–æ–π', '—Å—Ä–∞–∂–µ–Ω–∏–µ', '–º–æ–Ω—Å—Ç—Ä', 'NPC', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '—É—Ä–æ–≤–µ–Ω—å'
  ];

  constructor(
    db: DatabaseService,
    entityService: EntityService,
    config?: Partial<ContextManagerConfig>
  ) {
    this.db = db;
    this.entityService = entityService;
    this.config = { ...ContextManager.DEFAULT_CONFIG, ...config };
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
   */
  async buildOptimizedContext(
    roomId: string,
    options?: ContextOptions
  ): Promise<OptimizedContext> {
    const startTime = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = this.generateCacheKey(roomId, options);
    const cached = this.getCachedContext(cacheKey);
    
    if (cached) {
      console.log(`üöÄ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
      return cached.context;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    const activeSession = await this.db.getActiveSession(roomId);
    if (!activeSession) {
      throw new Error(`–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    const allMessages = await this.db.getRecentMessages(activeSession.id, 1000); // –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã
    const allEntities = await this.db.getEntitiesByRoom(roomId);

    // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const prioritizedMessages = await this.prioritizeMessages(allMessages, allEntities);
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
    const prioritizedEntities = await this.prioritizeEntities(allEntities, allMessages);

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —Ç–æ–∫–µ–Ω–∞–º
    const optimizedResult = await this.optimizeByTokens(
      prioritizedMessages,
      prioritizedEntities,
      options
    );

    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const contextSummary = this.generateContextSummary(
      optimizedResult.messages,
      optimizedResult.entities
    );

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã
    const relevantFacts = await this.getRelevantFacts(optimizedResult.entities);

    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const optimizedContext: OptimizedContext = {
      session_id: activeSession.id,
      room_id: roomId,
      recent_messages: optimizedResult.messages.map(pm => ({
        id: pm.id,
        session_id: pm.session_id,
        role: pm.role,
        content: pm.content,
        player_name: pm.player_name,
        timestamp: pm.timestamp,
        token_count: pm.token_count,
        compressed: pm.compressed
      })),
      active_entities: optimizedResult.entities.map(pe => ({
        id: pe.id,
        room_id: pe.room_id,
        type: pe.type,
        name: pe.name,
        description: pe.description,
        data: pe.data,
        created_at: pe.created_at,
        updated_at: pe.updated_at
      })),
      relevant_facts: relevantFacts,
      session_summary: activeSession.summary,
      total_tokens: optimizedResult.totalTokens,
      prioritized_messages: optimizedResult.messages,
      prioritized_entities: optimizedResult.entities,
      context_summary: contextSummary,
      optimization_stats: {
        original_token_count: this.estimateTokenCount(allMessages, allEntities),
        optimized_token_count: optimizedResult.totalTokens,
        compression_ratio: optimizedResult.totalTokens / this.estimateTokenCount(allMessages, allEntities),
        messages_included: optimizedResult.messages.length,
        messages_excluded: allMessages.length - optimizedResult.messages.length,
        entities_included: optimizedResult.entities.length
      }
    };

    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.cacheContext(cacheKey, optimizedContext);

    const processingTime = Date.now() - startTime;
    console.log(`üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ ${processingTime}ms: ${optimizedResult.totalTokens} —Ç–æ–∫–µ–Ω–æ–≤, ${optimizedResult.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, ${optimizedResult.entities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π`);

    return optimizedContext;
  }

  /**
   * –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  private async prioritizeMessages(
    messages: Message[],
    entities: Entity[]
  ): Promise<PrioritizedMessage[]> {
    const now = new Date();
    const entityNames = entities.map(e => e.name.toLowerCase());
    
    return messages.map((message, index) => {
      const timeDiff = now.getTime() - message.timestamp.getTime();
      const hoursAgo = timeDiff / (1000 * 60 * 60);
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ—Å (–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ)
      const timeWeight = Math.exp(-hoursAgo * ContextManager.MESSAGE_WEIGHTS.time_decay_factor);
      
      // –í–µ—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∞–∂–Ω–µ–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)
      const participantWeight = message.role === 'user' ? 
        ContextManager.MESSAGE_WEIGHTS.user_message_boost : 1.0;
      
      // –í–µ—Å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ D&D
      const content = message.content.toLowerCase();
      const keywordMatches = ContextManager.DND_KEYWORDS.filter(keyword => 
        content.includes(keyword)
      ).length;
      const keywordWeight = 1 + (keywordMatches * 0.1);
      
      // –í–µ—Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
      const entityMentions = entityNames.filter(name => 
        content.includes(name)
      ).length;
      const entityWeight = 1 + (entityMentions * 0.2);
      
      // –ë–æ–Ω—É—Å –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
      const recentBoost = index >= messages.length - 10 ? 
        ContextManager.MESSAGE_WEIGHTS.recent_boost : 1.0;
      
      // –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      const priorityScore = Math.min(1.0, 
        (timeWeight * participantWeight * keywordWeight * entityWeight * recentBoost) / 5
      );

      return {
        ...message,
        priority_score: priorityScore,
        relevance_factors: {
          time_weight: timeWeight,
          participant_weight: participantWeight,
          keyword_weight: keywordWeight,
          entity_weight: entityWeight
        }
      };
    }).sort((a, b) => b.priority_score - a.priority_score);
  }

  /**
   * –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  private async prioritizeEntities(
    entities: Entity[],
    messages: Message[]
  ): Promise<PrioritizedEntity[]> {
    const now = new Date();
    
    const prioritizedEntities: PrioritizedEntity[] = [];
    
    for (const entity of entities) {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      const mentions = messages.filter(msg => 
        msg.content.toLowerCase().includes(entity.name.toLowerCase())
      );
      
      const mentionCount = mentions.length;
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      const lastMention = mentions.length > 0 ? 
        new Date(Math.max(...mentions.map(m => m.timestamp.getTime()))) :
        entity.created_at;
      
      // –í–µ—Å —á–∞—Å—Ç–æ—Ç—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const maxMentions = Math.max(...entities.map(e => 
        messages.filter(msg => msg.content.toLowerCase().includes(e.name.toLowerCase())).length
      ));
      const frequencyWeight = maxMentions > 0 ? mentionCount / maxMentions : 0;
      
      // –í–µ—Å –Ω–µ–¥–∞–≤–Ω–æ—Å—Ç–∏
      const timeDiff = now.getTime() - lastMention.getTime();
      const hoursAgo = timeDiff / (1000 * 60 * 60);
      const recencyWeight = Math.exp(-hoursAgo * 0.05); // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–µ–π
      
      // –í–µ—Å —Å–≤—è–∑–µ–π (–ø–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ - –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–∫—Ç–æ–≤)
      const facts = await this.entityService.getEntityFacts(entity.id);
      const connectionWeight = Math.min(1.0, facts.length / 10);
      
      // –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      const priorityScore = 
        (frequencyWeight * ContextManager.ENTITY_WEIGHTS.frequency_factor) +
        (recencyWeight * ContextManager.ENTITY_WEIGHTS.recency_factor) +
        (connectionWeight * ContextManager.ENTITY_WEIGHTS.connection_factor);

      prioritizedEntities.push({
        ...entity,
        priority_score: priorityScore,
        mention_count: mentionCount,
        last_mentioned: lastMention,
        relevance_factors: {
          frequency_weight: frequencyWeight,
          recency_weight: recencyWeight,
          connection_weight: connectionWeight
        }
      });
    }
    
    return prioritizedEntities.sort((a, b) => b.priority_score - a.priority_score);
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
   */
  private async optimizeByTokens(
    prioritizedMessages: PrioritizedMessage[],
    prioritizedEntities: PrioritizedEntity[],
    options?: ContextOptions
  ): Promise<{
    messages: PrioritizedMessage[];
    entities: PrioritizedEntity[];
    totalTokens: number;
  }> {
    const maxTokens = options?.max_tokens || this.config.max_tokens;
    const maxMessages = options?.max_messages || this.config.max_messages;
    
    let totalTokens = 0;
    const selectedMessages: PrioritizedMessage[] = [];
    const selectedEntities: PrioritizedEntity[] = [];
    
    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    for (const message of prioritizedMessages) {
      if (selectedMessages.length >= maxMessages) break;
      if (message.priority_score < this.config.priority_threshold) break;
      
      const messageTokens = this.estimateMessageTokens(message);
      if (totalTokens + messageTokens > maxTokens * 0.8) break; // 80% –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
      
      selectedMessages.push(message);
      totalTokens += messageTokens;
    }
    
    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
    const remainingTokens = maxTokens - totalTokens;
    for (const entity of prioritizedEntities) {
      if (entity.priority_score < this.config.priority_threshold) break;
      
      const entityTokens = this.estimateEntityTokens(entity);
      if (totalTokens + entityTokens > maxTokens) break;
      
      selectedEntities.push(entity);
      totalTokens += entityTokens;
    }
    
    return {
      messages: selectedMessages,
      entities: selectedEntities,
      totalTokens
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–µ–π
   */
  private async getRelevantFacts(entities: PrioritizedEntity[]) {
    const allFacts = [];
    
    for (const entity of entities.slice(0, 10)) { // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 —Å—É—â–Ω–æ—Å—Ç–µ–π
      const facts = await this.entityService.getEntityFacts(entity.id);
      allFacts.push(...facts);
    }
    
    return allFacts;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private generateContextSummary(
    messages: PrioritizedMessage[],
    entities: PrioritizedEntity[]
  ): string {
    const recentMessages = messages.slice(0, 5);
    const topEntities = entities.slice(0, 5);
    
    const summary = [
      `–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`,
      `–ö–ª—é—á–µ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: ${recentMessages.map(m => m.player_name).filter(Boolean).slice(0, 3).join(', ')}`,
      `–û—Å–Ω–æ–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: ${topEntities.map(e => e.name).join(', ')}`,
      `–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${recentMessages[0]?.timestamp.toLocaleString('ru-RU') || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`
    ];
    
    return summary.join(' | ');
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
   */
  private estimateMessageTokens(message: Message): number {
    if (message.token_count) return message.token_count;
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: ~4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    return Math.ceil(message.content.length / 4);
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å—É—â–Ω–æ—Å—Ç–∏
   */
  private estimateEntityTokens(entity: Entity): number {
    const nameTokens = Math.ceil(entity.name.length / 4);
    const descTokens = entity.description ? Math.ceil(entity.description.length / 4) : 0;
    const dataTokens = Math.ceil(JSON.stringify(entity.data).length / 4);
    
    return nameTokens + descTokens + dataTokens;
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
   */
  private estimateTokenCount(messages: Message[], entities: Entity[]): number {
    const messageTokens = messages.reduce((sum, msg) => sum + this.estimateMessageTokens(msg), 0);
    const entityTokens = entities.reduce((sum, entity) => sum + this.estimateEntityTokens(entity), 0);
    
    return messageTokens + entityTokens;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
   */
  private generateCacheKey(roomId: string, options?: ContextOptions): string {
    const optionsHash = options ? JSON.stringify(options) : '';
    return `context:${roomId}:${optionsHash}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫—ç—à–∞
   */
  private getCachedContext(cacheKey: string): CachedContext | null {
    const cached = this.contextCache.get(cacheKey);
    
    if (!cached) return null;
    
    if (cached.expires_at < new Date()) {
      this.contextCache.delete(cacheKey);
      return null;
    }
    
    return cached;
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private cacheContext(cacheKey: string, context: OptimizedContext): void {
    const now = new Date();
    const expiresAt = new Date(now.getTime() + this.config.cache_ttl_ms);
    
    const cachedContext: CachedContext = {
      context,
      created_at: now,
      expires_at: expiresAt,
      cache_key: cacheKey
    };
    
    this.contextCache.set(cacheKey, cachedContext);
    
    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞
    this.cleanupCache();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
   */
  private cleanupCache(): void {
    const now = new Date();
    
    for (const [key, cached] of this.contextCache.entries()) {
      if (cached.expires_at < now) {
        this.contextCache.delete(key);
      }
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã (–ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
   */
  invalidateRoomCache(roomId: string): void {
    const keysToDelete: string[] = [];
    
    for (const [key] of this.contextCache.entries()) {
      if (key.includes(`context:${roomId}:`)) {
        keysToDelete.push(key);
      }
    }
    
    keysToDelete.forEach(key => this.contextCache.delete(key));
    
    console.log(`üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
   */
  getCacheStats(): {
    total_entries: number;
    active_entries: number;
    expired_entries: number;
    memory_usage_mb: number;
  } {
    const now = new Date();
    let activeEntries = 0;
    let expiredEntries = 0;
    
    for (const [, cached] of this.contextCache.entries()) {
      if (cached.expires_at >= now) {
        activeEntries++;
      } else {
        expiredEntries++;
      }
    }
    
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    const memoryUsageMb = (this.contextCache.size * 50) / 1024; // ~50KB –Ω–∞ –∑–∞–ø–∏—Å—å
    
    return {
      total_entries: this.contextCache.size,
      active_entries: activeEntries,
      expired_entries: expiredEntries,
      memory_usage_mb: memoryUsageMb
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
   */
  clearCache(): void {
    this.contextCache.clear();
    console.log('üóëÔ∏è –ö—ç—à ContextManager –æ—á–∏—â–µ–Ω');
  }
}
