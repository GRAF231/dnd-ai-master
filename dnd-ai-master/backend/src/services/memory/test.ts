#!/usr/bin/env node

import { MemoryManager } from './MemoryManager.js';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function testMemorySystem() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...\n');
  
  const testDbPath = './data/test_memory.db';
  const memoryManager = new MemoryManager(testDbPath);
  
  try {
    console.log('1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryManager...');
    await memoryManager.initialize();
    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
    
    console.log('2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã...');
    const roomResult = await memoryManager.createRoom({
      id: 'test_room_001',
      title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏',
      settings: { 
        theme: 'fantasy',
        max_players: 5,
        auto_save: true
      }
    });
    
    if (roomResult.success) {
      console.log('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', roomResult.data?.title);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', roomResult.error);
    }
    console.log();
    
    console.log('3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...');
    const session = await memoryManager.startSession('test_room_001');
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', session.id);
    console.log();
    
    console.log('4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
    
    const messages = [
      { content: '–ü—Ä–∏–≤–µ—Ç! –Ø —Ö–æ—á—É –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.', player: '–ê–ª–∏—Å–∞' },
      { content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä D&D! –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ç–∞–≤–µ—Ä–Ω–µ "–ó–æ–ª–æ—Ç–æ–π –¥—Ä–∞–∫–æ–Ω".', player: null },
      { content: '–Ø –æ—Å–º–∞—Ç—Ä–∏–≤–∞—é —Ç–∞–≤–µ—Ä–Ω—É. –ß—Ç–æ —è –≤–∏–∂—É?', player: '–ê–ª–∏—Å–∞' },
      { content: '–í —Ç–∞–≤–µ—Ä–Ω–µ –ø–æ–ª—É–º—Ä–∞–∫, –≥–æ—Ä—è—Ç —Å–≤–µ—á–∏. –ó–∞ —Å—Ç–æ–π–∫–æ–π —Å—Ç–æ–∏—Ç –¥–æ—Ä–æ–¥–Ω—ã–π —Ç—Ä–∞–∫—Ç–∏—Ä—â–∏–∫.', player: null }
    ];
    
    for (const msg of messages) {
      if (msg.player) {
        const result = await memoryManager.saveUserMessage(session.id, msg.content, msg.player);
        if (result.success) {
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${msg.player}`);
        }
      } else {
        const result = await memoryManager.saveAssistantMessage(session.id, msg.content, 150);
        if (result.success) {
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ò–ò-–º–∞—Å—Ç–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        }
      }
    }
    console.log();
    
    console.log('5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π...');
    
    const entities = [
      {
        type: 'location' as const,
        name: '–¢–∞–≤–µ—Ä–Ω–∞ "–ó–æ–ª–æ—Ç–æ–π –¥—Ä–∞–∫–æ–Ω"',
        description: '–£—é—Ç–Ω–∞—è —Ç–∞–≤–µ—Ä–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
        data: { 
          atmosphere: 'cozy',
          npcs: ['–¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫ –ë–æ—Ä–∏—Å'],
          items: ['–≠–ª—å', '–•–ª–µ–±', '–°—ã—Ä']
        }
      },
      {
        type: 'npc' as const,
        name: '–¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫ –ë–æ—Ä–∏—Å',
        description: '–î–æ—Ä–æ–¥–Ω—ã–π –º—É–∂—á–∏–Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ª–µ—Ç, –≤–ª–∞–¥–µ–ª–µ—Ü —Ç–∞–≤–µ—Ä–Ω—ã',
        data: {
          race: 'human',
          class: 'commoner',
          personality: 'friendly',
          secrets: ['–ó–Ω–∞–µ—Ç –æ —Ç–∞–π–Ω–æ–º –ø—Ä–æ—Ö–æ–¥–µ –≤ –ø–æ–¥–≤–∞–ª']
        }
      }
    ];
    
    for (const entity of entities) {
      const result = await memoryManager.createEntity({
        room_id: 'test_room_001',
        ...entity
      });
      
      if (result.success) {
        console.log(`‚úÖ –°—É—â–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞: ${entity.type} - ${entity.name}`);
      }
    }
    console.log();
    
    console.log('6Ô∏è‚É£ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...');
    const context = await memoryManager.buildContext('test_room_001');
    
    console.log(`‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:`);
    console.log(`   üìù –°–æ–æ–±—â–µ–Ω–∏–π: ${context.recent_messages.length}`);
    console.log(`   üè∑Ô∏è –°—É—â–Ω–æ—Å—Ç–µ–π: ${context.active_entities.length}`);
    console.log(`   üìä –§–∞–∫—Ç–æ–≤: ${context.relevant_facts.length}`);
    console.log(`   üî¢ –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${context.total_tokens}`);
    console.log();
    
    console.log('7Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...');
    const stats = await memoryManager.getStats();
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏:');
    console.log(`   üéÆ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${stats.total_sessions}`);
    console.log(`   üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.total_messages}`);
    console.log(`   üè∑Ô∏è –í—Å–µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: ${stats.total_entities}`);
    console.log(`   üìù –í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ–≤: ${stats.total_facts}`);
    console.log(`   üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–µ—Å—Å–∏–∏: ${stats.average_session_length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    console.log();
    
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('üß† –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–ò-–º–∞—Å—Ç–µ—Ä–æ–º');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error);
    process.exit(1);
  } finally {
    await memoryManager.close();
    console.log('\nüì¶ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  testMemorySystem().catch(console.error);
}
