import { DatabaseService } from './DatabaseService.js';
import { EntityService } from './EntityService.js';
import {
  Message, Session, Entity,
  SummaryServiceConfig, CreateSummaryRequest, Summary,
  AutoScene, SceneAnalysis, CompressionStats,
  OperationResult
} from './types.js';

/**
 * SummaryService - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω
 * - –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–¥–∫–∏ (—Å–æ–æ–±—â–µ–Ω–∏—è ‚Üí —Å—Ü–µ–Ω—ã ‚Üí —Å–µ—Å—Å–∏–∏)
 * - –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä—ã
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–∂–∞—Ç–∏—è
 */
export class SummaryService {
  private db: DatabaseService;
  private entityService: EntityService;
  private config: SummaryServiceConfig;
  private processingQueue: Map<string, Promise<any>> = new Map();

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private static readonly DEFAULT_CONFIG: SummaryServiceConfig = {
    min_messages_for_summary: 10,      // –ú–∏–Ω–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏
    max_messages_per_batch: 50,        // –ú–∞–∫—Å–∏–º—É–º 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ
    summary_trigger_threshold: 100,    // –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –ø—Ä–∏ 100+ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    scene_detection_enabled: true,     // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω
    background_processing: true        // –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
  };

  // –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è Claude
  private static readonly PROMPTS = {
    MESSAGE_SUMMARY: `–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ D&D —Å–µ—Å—Å–∏–∏. 
–°–æ—Ö—Ä–∞–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ä–µ—à–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤, –≤–∞–∂–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ. –ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: 1) —Å–æ–±—ã—Ç–∏–µ 1, 2) —Å–æ–±—ã—Ç–∏–µ 2..."

–°–æ–æ–±—â–µ–Ω–∏—è:
{messages}`,

    SCENE_DETECTION: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ D&D —Å–µ—Å—Å–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –ª–∏ –æ–Ω–∏ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ü–µ–Ω—É.
–°—Ü–µ–Ω–∞ - —ç—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–∏.

–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "scene_detected": true/false,
  "scene_title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã",
  "scene_description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "key_events": ["—Å–æ–±—ã—Ç–∏–µ 1", "—Å–æ–±—ã—Ç–∏–µ 2"],
  "participants": ["–∏–º—è1", "–∏–º—è2"],
  "entities_mentioned": ["—Å—É—â–Ω–æ—Å—Ç—å1", "—Å—É—â–Ω–æ—Å—Ç—å2"],
  "confidence": 0.0-1.0
}

–°–æ–æ–±—â–µ–Ω–∏—è:
{messages}`,

    SESSION_SUMMARY: `–°–æ–∑–¥–∞–π –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É D&D —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–¥–æ–∫ —Å—Ü–µ–Ω –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–í–∫–ª—é—á–∏: –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã/–æ–ø—ã—Ç.

–°—Ü–µ–Ω—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è:
{content}`
  };

  constructor(
    db: DatabaseService,
    entityService: EntityService,
    config?: Partial<SummaryServiceConfig>
  ) {
    this.db = db;
    this.entityService = entityService;
    this.config = { ...SummaryService.DEFAULT_CONFIG, ...config };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async createSummary(request: CreateSummaryRequest): Promise<OperationResult<Summary>> {
    try {
      console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ç–∏–ø–∞ ${request.summary_type} –¥–ª—è —Å–µ—Å—Å–∏–∏ ${request.session_id}`);

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
      const messages = await this.getMessagesForSummary(request);
      
      if (messages.length < this.config.min_messages_for_summary) {
        return {
          success: false,
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ (–º–∏–Ω–∏–º—É–º ${this.config.min_messages_for_summary})`
        };
      }

      // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      let summaryContent: string;
      let title: string;

      switch (request.summary_type) {
        case 'messages':
          summaryContent = await this.summarizeMessages(messages);
          title = request.title || `–°–≤–æ–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`;
          break;
          
        case 'scene':
          const sceneResult = await this.createSceneSummary(messages);
          summaryContent = sceneResult.summary;
          title = request.title || sceneResult.title;
          break;
          
        case 'session':
          summaryContent = await this.createSessionSummary(request.session_id);
          title = request.title || '–°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏';
          break;
          
        default:
          return {
            success: false,
            error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–≤–æ–¥–∫–∏: ${request.summary_type}`
          };
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const summary: Summary = {
        id: this.generateId(),
        session_id: request.session_id,
        type: request.summary_type,
        title,
        content: summaryContent,
        message_ids: messages.map(m => m.id),
        token_count: this.estimateTokenCount(summaryContent),
        created_at: new Date(),
        metadata: {
          original_message_count: messages.length,
          context: request.context
        }
      };

      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ summaries
      console.log(`‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${title} (${summary.token_count} —Ç–æ–∫–µ–Ω–æ–≤)`);

      return {
        success: true,
        data: summary
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
   */
  async checkAndCreateAutoSummary(sessionId: string): Promise<void> {
    if (!this.config.background_processing) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    if (this.processingQueue.has(sessionId)) return;

    try {
      const messages = await this.db.getRecentMessages(sessionId, 1000);
      
      if (messages.length >= this.config.summary_trigger_threshold) {
        console.log(`ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId} (${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        const processingPromise = this.processAutoSummary(sessionId, messages);
        this.processingQueue.set(sessionId, processingPromise);
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        processingPromise.finally(() => {
          this.processingQueue.delete(sessionId);
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏:', error);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω
   */
  async detectScenes(sessionId: string): Promise<AutoScene[]> {
    if (!this.config.scene_detection_enabled) return [];

    try {
      const messages = await this.db.getRecentMessages(sessionId, 1000);
      const scenes: AutoScene[] = [];
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Å—Ü–µ–Ω–∞–º
      const messageGroups = this.groupMessagesByPotentialScenes(messages);
      
      for (const group of messageGroups) {
        if (group.length < 5) continue; // –ú–∏–Ω–∏–º—É–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ü–µ–Ω—ã
        
        const analysis = await this.analyzeSceneMessages(group);
        
        if (analysis.scene_detected && analysis.confidence > 0.7) {
          const scene: AutoScene = {
            id: this.generateId(),
            session_id: sessionId,
            title: analysis.scene_title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ü–µ–Ω–∞',
            description: analysis.scene_description || '',
            start_message_id: group[0].id,
            end_message_id: group[group.length - 1].id,
            participants: analysis.participants,
            key_events: analysis.key_events,
            entities_mentioned: analysis.entities_mentioned,
            created_at: new Date()
          };
          
          scenes.push(scene);
        }
      }
      
      console.log(`üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${scenes.length} —Å—Ü–µ–Ω –≤ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
      return scenes;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∂–∞—Ç–∏—è
   */
  async getCompressionStats(sessionId: string): Promise<CompressionStats> {
    const startTime = Date.now();
    
    try {
      const messages = await this.db.getRecentMessages(sessionId, 1000);
      const compressedMessages = messages.filter((m: Message) => m.compressed);
      
      // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ–¥–∫–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const totalSummaries = 0; // –ó–∞–≥–ª—É—à–∫–∞
      const originalTokenCount = messages.reduce((sum: number, m: Message) => sum + (m.token_count || 0), 0);
      const compressedTokenCount = compressedMessages.reduce((sum: number, m: Message) => sum + (m.token_count || 0), 0);
      
      const stats: CompressionStats = {
        total_summaries: totalSummaries,
        messages_summarized: compressedMessages.length,
        original_token_count: originalTokenCount,
        compressed_token_count: compressedTokenCount,
        compression_ratio: originalTokenCount > 0 ? compressedTokenCount / originalTokenCount : 0,
        scenes_detected: 0, // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        processing_time_ms: Date.now() - startTime
      };
      
      return stats;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∂–∞—Ç–∏—è:', error);
      return {
        total_summaries: 0,
        messages_summarized: 0,
        original_token_count: 0,
        compressed_token_count: 0,
        compression_ratio: 0,
        scenes_detected: 0,
        processing_time_ms: Date.now() - startTime
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
   */
  private async getMessagesForSummary(request: CreateSummaryRequest): Promise<Message[]> {
    if (request.message_ids && request.message_ids.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
      const messages: Message[] = [];
      for (const id of request.message_ids) {
        const message = await this.db.getMessageById(id);
        if (message) messages.push(message);
      }
      return messages;
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
      return this.db.getRecentMessages(request.session_id, 1000);
    }
  }

  /**
   * –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Claude (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private async summarizeMessages(messages: Message[]): Promise<string> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º Claude API
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–≤–æ–¥–∫—É
    
    const messageTexts = messages.map(m => 
      `[${m.role}${m.player_name ? ` - ${m.player_name}` : ''}]: ${m.content}`
    ).join('\n');
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const summary = this.createSimpleSummary(messages);
    
    console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ —Å–≤–æ–¥–∫–∞ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π (${this.estimateTokenCount(summary)} —Ç–æ–∫–µ–Ω–æ–≤)`);
    return summary;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å—Ü–µ–Ω—ã
   */
  private async createSceneSummary(messages: Message[]): Promise<{ summary: string; title: string }> {
    const analysis = await this.analyzeSceneMessages(messages);
    
    const title = analysis.scene_title || '–ò–≥—Ä–æ–≤–∞—è —Å—Ü–µ–Ω–∞';
    const summary = analysis.scene_description || this.createSimpleSummary(messages);
    
    return { summary, title };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–∏
   */
  private async createSessionSummary(sessionId: string): Promise<string> {
    const session = await this.db.getSessionById(sessionId);
    const messages = await this.db.getRecentMessages(sessionId, 1000);
    
    if (!session) {
      throw new Error(`–°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    
    // TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫–∏ —Å—Ü–µ–Ω –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö
    // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    return this.createSimpleSummary(messages);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ü–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Claude API)
   */
  private async analyzeSceneMessages(messages: Message[]): Promise<SceneAnalysis> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º Claude API
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
    
    const participants = Array.from(new Set(
      messages.map(m => m.player_name).filter(Boolean)
    )) as string[];
    
    const content = messages.map(m => m.content.toLowerCase()).join(' ');
    
    // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keyEvents: string[] = [];
    if (content.includes('–∞—Ç–∞–∫') || content.includes('–±–æ–π')) keyEvents.push('–ë–æ–µ–≤–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ');
    if (content.includes('–¥–∏–∞–ª–æ–≥') || content.includes('–≥–æ–≤–æ—Ä')) keyEvents.push('–î–∏–∞–ª–æ–≥ —Å NPC');
    if (content.includes('–∏—Å—Å–ª–µ–¥–æ–≤') || content.includes('–ø–æ–∏—Å–∫')) keyEvents.push('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ');
    if (content.includes('—Å–æ–∫—Ä–æ–≤–∏—â') || content.includes('–Ω–∞–≥—Ä–∞–¥')) keyEvents.push('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã');
    
    // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    const entities = await this.entityService.extractEntitiesFromText(
      messages[0]?.session_id || '', 
      content
    );
    
    const analysis: SceneAnalysis = {
      scene_detected: messages.length >= 5 && keyEvents.length > 0,
      scene_title: keyEvents.length > 0 ? keyEvents[0] : undefined,
      scene_description: `–°—Ü–µ–Ω–∞ —Å —É—á–∞—Å—Ç–∏–µ–º ${participants.join(', ')}`,
      key_events: keyEvents,
      participants,
      entities_mentioned: entities.map(e => e.id),
      confidence: Math.min(0.9, (keyEvents.length * 0.3) + (participants.length * 0.2) + 0.3)
    };
    
    return analysis;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Å—Ü–µ–Ω–∞–º
   */
  private groupMessagesByPotentialScenes(messages: Message[]): Message[][] {
    const groups: Message[][] = [];
    let currentGroup: Message[] = [];
    
    for (let i = 0; i < messages.length; i++) {
      const message = messages[i];
      currentGroup.push(message);
      
      // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω:
      // - –ë–æ–ª—å—à–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (>30 –º–∏–Ω—É—Ç)
      // - –°–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      // - –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –ø–µ—Ä–µ—Ö–æ–¥–∞
      
      const nextMessage = messages[i + 1];
      if (nextMessage) {
        const timeDiff = nextMessage.timestamp.getTime() - message.timestamp.getTime();
        const minutesDiff = timeDiff / (1000 * 60);
        
        const isSceneBreak = 
          minutesDiff > 30 || // –ë–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤
          message.content.toLowerCase().includes('–ø–µ—Ä–µ—Ö–æ–¥') ||
          message.content.toLowerCase().includes('—Å–ª–µ–¥—É—é—â–∞—è —Å—Ü–µ–Ω–∞') ||
          currentGroup.length >= 20; // –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ü–µ–Ω–µ
        
        if (isSceneBreak) {
          groups.push([...currentGroup]);
          currentGroup = [];
        }
      }
    }
    
    if (currentGroup.length > 0) {
      groups.push(currentGroup);
    }
    
    return groups;
  }

  /**
   * –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏
   */
  private async processAutoSummary(sessionId: string, messages: Message[]): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
      const messagesToSummarize = messages.slice(0, -20);
      
      if (messagesToSummarize.length >= this.config.min_messages_for_summary) {
        await this.createSummary({
          session_id: sessionId,
          message_ids: messagesToSummarize.map(m => m.id),
          summary_type: 'messages',
          title: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ (${messagesToSummarize.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`
        });
        
        // TODO: –ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Å–∂–∞—Ç—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log(`ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${messagesToSummarize.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω—ã
      if (this.config.scene_detection_enabled) {
        await this.detectScenes(sessionId);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–¥–∫–∏:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å–≤–æ–¥–∫–∏ (–±–µ–∑ Claude API)
   */
  private createSimpleSummary(messages: Message[]): string {
    const participants = Array.from(new Set(
      messages.map(m => m.player_name).filter(Boolean)
    ));
    
    const userMessages = messages.filter(m => m.role === 'user');
    const assistantMessages = messages.filter(m => m.role === 'assistant');
    
    const summary = [
      `–°–≤–æ–¥–∫–∞ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`,
      `–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participants.join(', ')}`,
      `–°–æ–æ–±—â–µ–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤: ${userMessages.length}`,
      `–û—Ç–≤–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞: ${assistantMessages.length}`,
      `–ü–µ—Ä–∏–æ–¥: ${messages[0]?.timestamp.toLocaleString('ru-RU')} - ${messages[messages.length - 1]?.timestamp.toLocaleString('ru-RU')}`
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const content = messages.map(m => m.content.toLowerCase()).join(' ');
    const events: string[] = [];
    
    if (content.includes('–∞—Ç–∞–∫') || content.includes('–±–æ–π')) events.push('–ë–æ–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è');
    if (content.includes('–¥–∏–∞–ª–æ–≥') || content.includes('—Ä–∞–∑–≥–æ–≤–æ—Ä')) events.push('–î–∏–∞–ª–æ–≥–∏');
    if (content.includes('–∏—Å—Å–ª–µ–¥–æ–≤') || content.includes('–ø–æ–∏—Å–∫')) events.push('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ');
    if (content.includes('–º–∞–≥–∏—è') || content.includes('–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ')) events.push('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞–≥–∏–∏');
    if (content.includes('—Å–æ–∫—Ä–æ–≤–∏—â') || content.includes('–Ω–∞–≥—Ä–∞–¥')) events.push('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥');
    
    if (events.length > 0) {
      summary.push(`–ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: ${events.join(', ')}`);
    }
    
    return summary.join('\n');
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
   */
  private estimateTokenCount(text: string): number {
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: ~4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    return Math.ceil(text.length / 4);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
   */
  private generateId(): string {
    return `summary_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  getProcessingStatus(): {
    active_sessions: string[];
    queue_size: number;
  } {
    return {
      active_sessions: Array.from(this.processingQueue.keys()),
      queue_size: this.processingQueue.size
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  clearProcessingQueue(): void {
    this.processingQueue.clear();
    console.log('üóëÔ∏è –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ SummaryService –æ—á–∏—â–µ–Ω–∞');
  }
}
